<?xml version="1.0" encoding="UTF-8" standalone="yes"?>

<!-- created by libisp v5.0.2 - 18-mar-2024 19:03:59 -->

<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>


<c74object name="spat5.hoa.decoder~" module="spat5">
  <digest>Ambisonic decoder</digest>
  <description><o>spat5.hoa.decoder~</o> decodes an Ambisonic (HOA) stream for a given loudspeaker array.<br/><br/>Various decoding methods are proposed:<br/>- Direct-Sampling decoder, also referred to as the Sampling Ambisonic Decoder (SAD)<br/>- Energy-Preserving Ambisonic decoder (EPAD), which is the default in Spat<br/>- Mode-Matching Ambisonic decoder (MMAD)<br/>- All-Round Ambisonic decoder (AllRAD)<br/>- Improved All-Round Ambisonic decoder (AllRAD+)<br/>- All-Round alternative for panning-invariant loudness (AllRAD2)<br/>- Constant angular Spread Ambisonic decoder (CSAD)<br/>- Most VBAP-like Ambisonic decoder (MVLAD)<br/>- Regularized Mode-Matching Ambisonic decoder (RMMAD), aka Energy-Limited Mode-Matching Ambisonic decoder<br/><br/>Please note that HOA components in <o>spat5.hoa.decoder~</o> are ordered with the ACN sorting scheme (cf <o>spat5.hoa.sorting~</o> for further information)<br/><br/><br/><br/>The 'sampling ambisonic decoding' (SAD) is the simplest decoding. It samples the virtual panning function at the loudspeaker directions.SAD is optimal for loudspeakers arranged as t-design layouts, with t >= (2N+1) (N being the Ambisonic order).Typically, the SAD should only be used for 2D loudspeaker layouts, i.e. arranged regularly in a circle. Avoids this decoder for 3D setups.<br/><br/>The 'mode-matching decoder' (MMAD) is suitable for both 2D and 3D. It is based on a pseudo-inverse of the re-encoding matrix. MMAD is well-behaved for regular loudspeaker arrangements. It can also give good results with slightly irregular setups. However it can become unstable with strongly irregular setups, i.e. it can completely blow up the speaker feeds. So, be careful.With the '/info' message, you obtain the conditioning number of MMAD. This number gives you an estimate of how well-balanced the system is. A conditioning number close to 0 dB is excellent. Values less than 10 dB are usually quite acceptable. With values higher than 20 dB, the decoding can become problematic (or dangerous).<br/><br/>The 'regularized-mode-matching decoder' (RMMAD) is somehow similar to MMAD, however it uses a regularization factor for stabilization of the pseudo-inverse. This regularization factor (alpha) varies from 0% to 100%. A value of 0% provides results similar to MMAD.  A value of 100% generates even energy distribution, i.e. results similar to EPAD. Intermediate values of alpha allow to 'blend' MMAD and EPAD.<br/><br/>EPAD and AllRAD are other HOA decoding methods suitable for 2D and 3D HOA, and they can cope with any kind of loudspeaker arrangement. These decoding methods always work, as soon as there are enough loudspeakers; they are always feasible and by nature numerically stable.<br/><br/>EPAD uses a regularized matrix inversion such that the decoded energy is preserved even with non-uniformly arranged arrays (and even for directions with only sparse loudspeaker coverage). EPAD is the default method in spat5 (and the one we usually recommend).<br/><br/>'All-round Ambisonic decoding' (AllRAD) is designed in two steps. First, an optimal virtual loudspeaker layout using t-design arrangement is considered (for which the SAD is optimal); Secondly, the signals of these virtual loudspeakers are mapped to the real loudspeakers via VBAP.<br/><br/>'Improved All-Round Ambisonic Decoding' (AllRAD+) combines AllRAD and SAD. Constant energy that is achieved for the idealized virtual loudspeaker setup in AllRAD is corrupted by the VBAP stage as, per loudspeaker pair, all virtual sources are superimposed linearly instead of energetically. The prevailing linear superposition increases the energy wherever the loudspeaker spacing is large. Roughly, at such directions AllRAD doubles the energy, whereas it is halved at directions with dense loudspeaker spacing. Conversely, SAD might lose all energy where the loudspeaker spacing is large and roughly doubles it where the loudspeaker spacing is dense. AllRAD+ tries to solve this issue by combining (i.e. mixing) SAD and AllRAD.The loudness variation of AllRAD+ is competitive with EPAD and its angular mapping resembles AllRAD.<br/><br/>The 'Constant angular Spread Ambisonc decoder' (CSAD) calculates an ambisonic decoding matrix providing a nearly constant angular spread across source directions while maintaining a constant energy and very low energy-vector direction mismatch.The computed HOA decoding matrix optimally fits the MDIP (Multiple-Direction Intensity Panning) gains corresponding to several virtual source directions. This typically provides energy vectors that point in the desired direction while having a constant norm.<br/><br/>The 'Most VBAP-like decoder (MVLAD)' was proposed by Epain. MVLAP minimizes the squared deviation to gains calculated with VBAP. Is essentially uses the same approach as AllRAD but using MMAD (instead of SAD) for mapping the virtual speakers. With t-design virtual speakers, the MMAD is well-behaved, and Zotter et al. have shown that MVLAD is equivalent to AllRAD.<br/><br/>.<br/><br/>Reference(s) : <br/>F. Zotter, H. Pomberger, and M. Noisternig. Energy-preserving ambisonic decoding. Acta Acustica united with Acustica, 98:37 -- 47, 2012. <br/><br/> F. Zotter, M. Frank, and H. Pomberger. Comparison of energy-preserving and all-round Ambisonic decoders. In Proc. the Fortschritte der Akustik, AIA-DAGA, March 2013. <br/><br/> J. Daniel. Representation de champs acoustiques, application a la transmission et a la reproduction de scenes sonores complexes dans un contexte multimedia. PhD thesis, Universite de Paris VI, 2001. <br/><br/> F. Zotter and M. Frank. All-round ambisonic panning and decoding. Journal of the Audio Engineering Society, 60(10):807 -- 820, 2012. <br/><br/> N. Epain, C. Jin, and F. Zotter. Ambisonic decoding with constant angular spread. Acta Acustica united with Acustica, 100:928 -- 936, 2014. <br/><br/> F. Zotter, M. Frank. Ambisonics: A Practical 3D Audio Theory for Recording, Studio Production, Sound Reinforcement, and Virtual Reality. Springer, 2019. <br/><br/> F. Zotter, H. Pomberger, and M. Noisternig. Ambisonic decoding with and without mode-matching: A case study using the hemisphere. In Proc. of the 2nd International Symposium on Ambisonics and Spherical Acoustics, Paris, France, May 2010. <br/><br/> F. Zotter, M. Frank, and A. Sontacchi. The virtual t-design ambisonics-rig using VBAP. In Proc. of the 1st EAA-EuoRegio 2010 Congress on Sound and Vibration, Ljubljana, Slovenia, Sept 2010. <br/><br/> F. Zotter, M. Frank. Ambisonic decoding with panning-invariant loudness on small layouts (AllRAD2). In Proc. of the AES 144th Convention, Milan, Italy, May 2018. <br/><br/> A. J. Heller, R. Lee, and E. M. Benjamin. Is My Decoder Ambisonic? In Proc. of the 125th Convention of Audio Engineering Society (AES), San Francisco, CA, USA, Oct 2008. <br/><br/> A. J. Heller, and E. M. Benjamin. Design and implementation of filters for Ambisonic decoders In Proc. of the 1st International Faust Conference (IFC), Mainz, Germany, July 2018. <br/><br/> A. J. Heller, R. Lee, and E. M. Benjamin. A Toolkit for the Design of Ambisonic Decoders. In Proc. of the Linux Audio Conference (LAC), Stanford, California, USA, April 2012. <br/><br/> D. Scaini and D. Arteaga. Decoding of Higher Order Ambisonics to Irregular Periphonic Loudspeaker Arrays. In Proc. of the 55th AES Conference, Helsinki, Finland, Aug 2014. <br/><br/> D. Arteaga. An Ambisonics Decoder for Irregular 3-D Loudspeaker Arrays. In Proc. of the 134th AES Convention, Rome, Italy, May 2013. <br/><br/> H. Pomberger and F. Zotter. Ambisonic panning with constant energy constraint. In Proc of the 38th German Annual Conference on Acoustics (DAGA), Darmstadt, Germany, March 2012. <br/><br/> J.-M. Batke and F. Keiler. Using VBAP-Derived Panning Functions for 3D Ambisonics Decoding. In Proc. of the 2nd International Symposium on Ambisonics and Spherical Acoustics, Paris, France, May 2010.<br/><br/></description>
  <inletlist>
  </inletlist>
  <outletlist>
  </outletlist>
  <objarglist>
  </objarglist>
  <attributelist>
    <attribute name="dimension" type="int" set="1" get="1" size="1">
      <description>The <m> dimension </m> attribute represents the dimension of the Ambisonic stream: either 2D or 3D.</description>
      <digest>dimension of the Ambisonic stream</digest>
    </attribute>
    <attribute name="initwith" type="string" set="1" get="1" size="1">
      <description>The <m> initwith </m> attribute can be used to specify the initial state of the object. You should provide a list of comma-separated OSC commands. The list of messages should be quoted (with double quote character &quot;). This is similar to sending the list of commands via <o>loadbang</o> or <o>loadmess</o>.<br/> Have a look at the <i>spat5.tuto-osc-3.maxpat</i> example for further details.<br/> Note that the <m> initwith </m> attribute cannot be set via message, <o>attrui</o> or inspector; it must be typed directly within the object box.</description>
      <digest>initial state of the object</digest>
    </attribute>
    <attribute name="mc" type="int" set="1" get="1" size="1">
      <description>The <m> mc </m> attribute enables multichannel patch-cord for this object (compatible with Max8 or higher). Note that the <m> mc </m> attribute cannot be set via message, <o>attrui</o> or inspector; it must be typed directly within the object box.</description>
      <digest>multichannel patch-cord</digest>
    </attribute>
    <attribute name="order" type="int" set="1" get="1" size="1">
      <description>The <m> order </m> attribute represents the Ambisonic order of the stream. <br/>For 2D Ambisonic, the number of components is (2 x order + 1).<br/>For 3D Ambisonic, the number of components is (order+1) x (order+1).</description>
      <digest>Ambisonic order of the stream</digest>
    </attribute>
    <attribute name="outputs" type="int" set="1" get="1" size="1">
      <description>The <m> outputs </m> attribute represents the number of output channels of the object. This  attribute must be set in the object box, when the object is instantiated; it can not be later set with a message (or <o>attrui</o> or inspector), since  the number of signal inlets or outlets can not be changed dynamically.</description>
      <digest>number of output channels</digest>
    </attribute>
    <attribute name="parameter_enable" type="boolean" set="1" get="1" size="1">
      <description>The <m> parameter_enable </m> attribute is used for compatibility with Max snapshots. It can also be used to store the initial state of the object (see 'Initial Enable' in the Max inspector).</description>
      <digest>compatibility with snapshots</digest>
    </attribute>
  </attributelist>
  <methodlist>
    <method name="/decoding/type">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>set the decoding type.</description>
      <digest>set the decoding type</digest>
    </method>
    <method name="/speakers/number">
      <arglist>
        <arg type="int"/>
      </arglist>
      <description>set the number of loudspeakers.</description>
      <digest>set the number of loudspeakers</digest>
    </method>
    <method name="/speakers/aed">
      <arglist>
        <arg type="nnnn..."/>
      </arglist>
      <description>set the list of speaker coordinates (with aed format).</description>
      <digest>set speaker positions</digest>
    </method>
    <method name="/speakers/xyz">
      <arglist>
        <arg type="nnnn..."/>
      </arglist>
      <description>set the list of speaker coordinates (with xyz format).</description>
      <digest>set speaker positions</digest>
    </method>
    <method name="/speakers/ade">
      <arglist>
        <arg type="nnnn..."/>
      </arglist>
      <description>set the list of speaker coordinates (with ade format).</description>
      <digest>set speaker positions</digest>
    </method>
    <method name="/speakers/xy">
      <arglist>
        <arg type="nnnn..."/>
      </arglist>
      <description>set the list of speaker coordinates (with xy format).</description>
      <digest>set speaker positions</digest>
    </method>
    <method name="/speakers/ae">
      <arglist>
        <arg type="nnnn..."/>
      </arglist>
      <description>set the list of speaker coordinates (with ae format).</description>
      <digest>set speaker positions</digest>
    </method>
    <method name="/speaker/[index]/aed">
      <arglist>
        <arg type="number][number][number"/>
      </arglist>
      <description>set the position of the i-th loudspeaker using navigation coordinates (azimuth/elevation/distance).</description>
      <digest>set speaker position</digest>
    </method>
    <method name="/speaker/[index]/ade">
      <arglist>
        <arg type="number][number][number"/>
      </arglist>
      <description>set the position of the i-th loudspeaker using navigation coordinates (azimuth/distance/elevation).</description>
      <digest>set speaker position</digest>
    </method>
    <method name="/speaker/[index]/xyz">
      <arglist>
        <arg type="number][number][number"/>
      </arglist>
      <description>set the position of the i-th loudspeaker using cartesian coordinates.</description>
      <digest>set speaker position</digest>
    </method>
    <method name="/speaker/[index]/xy">
      <arglist>
        <arg type="number][number"/>
      </arglist>
      <description>set the xy-coordinate of the i-th loudspeaker, and use default z (=0).</description>
      <digest>set speaker position</digest>
    </method>
    <method name="/speaker/[index]/ae">
      <arglist>
        <arg type="number][number"/>
      </arglist>
      <description>set the azimuth/elevation of the i-th loudspeaker, using default distance (=1).</description>
      <digest>set speaker position</digest>
    </method>
    <method name="/speaker/[index]/az">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set the azimuth of the i-th loudspeaker, using default distance (=1) and elevation (=0).</description>
      <digest>set speaker position</digest>
    </method>
    <method name="/norm">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>set HOA normalization.<br/>Possible values: sn3d, sn2d, n3d, n2d, fuma, maxn, unnormalized.</description>
      <digest>set HOA normalization. Possible values: sn3d, sn2d, n3d, n2d, fuma, maxn, unnormalized</digest>
    </method>
    <method name="/order">
      <arglist>
        <arg type="int"/>
      </arglist>
      <description>set HOA order.</description>
      <digest>set HOA order</digest>
    </method>
    <method name="/dimension">
      <arglist>
        <arg type="int"/>
      </arglist>
      <description>set HOA dimension.<br/>Possible values: 2, 3.</description>
      <digest>set HOA dimension. Possible values: 2, 3</digest>
    </method>
    <method name="/method">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>set HOA decoder method.<br/>Possible values: direct-sampling, mode-matching, regularized-mode-matching, energy-preserving, all-rad, all-rad2, all-radknn, allrad+, mvlad, csad, no decoding.</description>
      <digest>set HOA decoder method. Possible values: direct-sampling, mode-matching, regularized-mode-matching, energy-preserving, all-rad, all-rad2, all-radknn, allrad+, mvlad, csad, no decoding</digest>
    </method>
    <method name="/type">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>set HOA optimization type.<br/>Possible values: basic, in-phase, maxre, basic-maxre, maxre-inphase, inphase-maxre.</description>
      <digest>set HOA optimization type. Possible values: basic, in-phase, maxre, basic-maxre, maxre-inphase, inphase-maxre</digest>
    </method>
    <method name="/crossover">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set HOA crossover frequency (Hz) for dual band decoding.</description>
      <digest>set HOA crossover frequency (Hz) for dual band decoding</digest>
    </method>
    <method name="/powercompensation">
      <arglist>
        <arg type="boolean"/>
      </arglist>
      <description>enable power compensation i.e. diffuse field energy normalization (for HOA decoder).</description>
      <digest>enable power compensation i.e. diffuse field energy normalization (for HOA decoder)</digest>
    </method>
    <method name="/phantom/zenith">
      <arglist>
        <arg type="boolean"/>
      </arglist>
      <description>insert a phantom speaker at the zenith (for HOA decoder).</description>
      <digest>insert a phantom speaker at the zenith (for HOA decoder)</digest>
    </method>
    <method name="/phantom/nadir">
      <arglist>
        <arg type="boolean"/>
      </arglist>
      <description>insert a phantom speaker at the nadir (for HOA decoder).</description>
      <digest>insert a phantom speaker at the nadir (for HOA decoder)</digest>
    </method>
    <method name="/format">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>set coordinate format used in the status window.</description>
      <digest>set coordinate format used in the status window</digest>
    </method>
    <method name="/dsp/mute">
      <arglist>
        <arg type="boolean"/>
      </arglist>
      <description>mute the DSP rendering. CPU resources are not used when the DSP is muted.  A smooth ramp is applied  (see /dsp/mute/ramptime).</description>
      <digest>mute DSP</digest>
    </method>
    <method name="/dsp/mute">
      <arglist>
        <arg type="boolean][number"/>
      </arglist>
      <description>mute the DSP rendering. CPU resources are not used when the DSP is muted.  A smooth ramp is applied; the second argument specifies the length (in msec) of the ramp.</description>
      <digest>mute DSP</digest>
    </method>
    <method name="/dsp/mute/ramptime">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set ramp time (in msec) for mute/unmute.</description>
      <digest>mute ramp time</digest>
    </method>
    <method name="/dsp/bypass">
      <arglist>
        <arg type="boolean"/>
      </arglist>
      <description>bypass the DSP rendering. CPU resources are not used when the DSP is bypassed.  A smooth ramp of is applied (see /dsp/bypass/ramptime).</description>
      <digest>bypass DSP</digest>
    </method>
    <method name="/dsp/bypass">
      <arglist>
        <arg type="boolean][number"/>
      </arglist>
      <description>mute the DSP rendering. CPU resources are not used when the DSP is muted.  A smooth ramp is applied; the second argument specifies the length (in msec) of the ramp.</description>
      <digest>bypass DSP</digest>
    </method>
    <method name="/dsp/bypass/ramptime">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set ramp time (in msec) for bypass.</description>
      <digest>bypass ramp time</digest>
    </method>
    <method name="/dsp/automute">
      <arglist>
        <arg type="boolean"/>
      </arglist>
      <description>enable/disable the auto-mute (i.e. disable audio computation when incoming signals are 0).</description>
      <digest>enable auto-mute</digest>
    </method>
    <method name="/dsp/automute/attack">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set the duration (in seconds) before auto-muting.</description>
      <digest>auto-mute attack time</digest>
    </method>
    <method name="/dsp/post">
      <description>post various information to the Max console (audio should be turned on).</description>
      <digest>post information</digest>
    </method>
    <method name="/dsp/clear">
      <description>clear the internal state of the audio processor. In general, you don't have to send this message directly. This is done automatically whenever the Max audio settings change. Yet, you might want to use this message to clear the object's sample-memory in case of a blow-up.</description>
      <digest>clear the internal state</digest>
    </method>
    <method name="/dump/dsp/latency">
      <description>send the processor latency (in samples) through the dump outlet.</description>
      <digest>dump latency</digest>
    </method>
    <method name="/verbose">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>set verbosity i.e. change the way information is posted to the Max console.<br/>Possible values: silent, minimal, normal, detailed.</description>
      <digest>set verbosity</digest>
    </method>
    <method name="/post/version">
      <description>print the version in the Max Console.</description>
      <digest>post version</digest>
    </method>
    <method name="/post/version">
      <arglist>
        <arg type="details"/>
      </arglist>
      <description>print detailed version in the Max Console.</description>
      <digest>post version</digest>
    </method>
    <method name="/post/doc">
      <description>print the help documentation in the Max Console.</description>
      <digest>post documentation</digest>
    </method>
    <method name="/post/state">
      <description>print the OSC status in the Max Console.</description>
      <digest>post current state</digest>
    </method>
    <method name="/preset/load">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>load a preset from file. Supported file extensions : '.txt' for human-readable OSC text file, '.osc' for binary encoded OSC file, '.coll' for human-readable Max coll file (compatible with the <o>coll</o> object). '.txt' is the default file format. You can specify the fullpath of the file, or only its filename if the file is inside Max search path.</description>
      <digest>load preset</digest>
    </method>
    <method name="/preset/load">
      <description>open a user dialog to load a preset file. Supported file extensions : '.txt' for human-readable OSC text file, '.osc' for binary encoded OSC file, '.coll' for human-readable Max coll file (compatible with the <o>coll</o> object). '.txt' is the default file format.</description>
      <digest>load preset</digest>
    </method>
    <method name="/preset/export">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>export a preset to file. Supported file extensions : '.txt' for human-readable OSC text file, '.osc' for binary encoded OSC file, '.coll' for human-readable Max coll file (compatible with the <o>coll</o> object). '.txt' is the default file format. If the file extension is not provided, '.txt' will be used by default.  If the destination folder is not provided, the file will be saved in your home folder (/Users/yourlogin).</description>
      <digest>export preset</digest>
    </method>
    <method name="/preset/export">
      <description>open a user dialog to export a preset to file. Supported file extensions : '.txt' for human-readable OSC text file, '.osc' for binary encoded OSC file, '.coll' for human-readable Max coll file (compatible with the <o>coll</o> object). '.txt' is the default file format.</description>
      <digest>export preset</digest>
    </method>
    <method name="/status">
      <description>open the status window and bring it to front.</description>
      <digest>open status window</digest>
    </method>
    <method name="/status/open">
      <description>open the status window and bring it to front.</description>
      <digest>open status window</digest>
    </method>
    <method name="/status/close">
      <description>close the status window.</description>
      <digest>close status window</digest>
    </method>
    <method name="/status/openorclose">
      <description>open the status window if it was closed; close it if it was opened.</description>
      <digest>open status window</digest>
    </method>
    <method name="/status/font/size">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set the font size of the status window.</description>
      <digest>font size for status window</digest>
    </method>
    <method name="/status/floating">
      <arglist>
        <arg type="boolean"/>
      </arglist>
      <description>make the status window 'floating' (i.e. always on top of other windows).</description>
      <digest>statuswindow floating</digest>
    </method>
    <method name="/help">
      <description>open the help window and bring it to front.</description>
      <digest>open help window</digest>
    </method>
    <method name="/help/open">
      <description>open the help window and bring it to front.</description>
      <digest>open help window</digest>
    </method>
    <method name="/help/close">
      <description>close the help window.</description>
      <digest>close help window</digest>
    </method>
    <method name="/help/openorclose">
      <description>open the help window if it was closed; close it if it was opened.</description>
      <digest>open help window</digest>
    </method>
    <method name="/help/font/size">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set the font size of the help window.</description>
      <digest>font size for help window</digest>
    </method>
    <method name="/help/floating">
      <arglist>
        <arg type="boolean"/>
      </arglist>
      <description>make the help window 'floating' (i.e. always on top of other windows).</description>
      <digest>helpwindow floating</digest>
    </method>
    <method name="/snapshot">
      <description>open the snapshot window and bring it to front.</description>
      <digest>open snapshot window</digest>
    </method>
    <method name="/snapshot/open">
      <description>open the snapshot window and bring it to front.</description>
      <digest>open snapshot window</digest>
    </method>
    <method name="/snapshot/close">
      <description>close the snapshot window.</description>
      <digest>close snapshot window</digest>
    </method>
    <method name="/snapshot/openorclose">
      <description>open the snapshot window if it was closed; close it if it was opened.</description>
      <digest>open snapshot window</digest>
    </method>
    <method name="/snapshot/font/size">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set the font size of the snapshot window.</description>
      <digest>font size for snapshot window</digest>
    </method>
    <method name="/snapshot/floating">
      <arglist>
        <arg type="boolean"/>
      </arglist>
      <description>make the snapshot window 'floating' (i.e. always on top of other windows).</description>
      <digest>snapshotwindow floating</digest>
    </method>
    <method name="/status/copytoclipboard">
      <description>copy the status to (the OS) clipboard.</description>
      <digest>copy status to clipboard</digest>
    </method>
    <method name="/status/copytoclipboard">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>copy the status to (the OS) clipboard, and specify the end-of-line character (e.g. ',').</description>
      <digest>copy status to clipboard</digest>
    </method>
    <method name="/dump">
      <description>dump the complete state of the object over the rightmost outlet (a.k.a. dump outlet).</description>
      <digest>dump state</digest>
    </method>
    <method name="/dump">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>dump a subset of the state of the object over the rightmost outlet. See spat5.tuto-dump-1.maxpat for usage examples.</description>
      <digest>dump state</digest>
    </method>
    <method name="/snapshot/deleteall">
      <description>delete all the snapshots currently in memory.</description>
      <digest>clear snapshots</digest>
    </method>
    <method name="/snapshot/add">
      <description>create a new snapshot with the current state.</description>
      <digest>add a new snapshot</digest>
    </method>
    <method name="/snapshot/add">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>create a new snapshot with the current state, and set its name.</description>
      <digest>add a new snapshot</digest>
    </method>
    <method name="/snapshot/[index]/store">
      <description>store the current state in the i-th snapshot (in memory).</description>
      <digest>store snapshot</digest>
    </method>
    <method name="/snapshot/[index]/recall">
      <description>recall the current state from the i-th snapshot.</description>
      <digest>recall snapshot</digest>
    </method>
    <method name="/snapshot/[index]/jump">
      <description>immediately recall the current state from the i-th snapshot (ignoring recall time).</description>
      <digest>immediately recall snapshot</digest>
    </method>
    <method name="/snapshot/[index]/name">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>set the name of the i-th snapshot.</description>
      <digest>set snapshot name</digest>
    </method>
    <method name="/snapshot/interpolate">
      <arglist>
        <arg type="int][int][number"/>
      </arglist>
      <description>interpolate between the i-th and j-th snapshots.</description>
      <digest>interpolate between two snapshots</digest>
    </method>
    <method name="/snapshot/interpolate">
      <arglist>
        <arg type="string][string][number"/>
      </arglist>
      <description>interpolate between two snapshots, given their names.</description>
      <digest>interpolate between two snapshots</digest>
    </method>
    <method name="/snapshot/[index]/delete">
      <description>delete the i-th snapshot.</description>
      <digest>delete snapshot</digest>
    </method>
    <method name="/snapshot/[index]/copytoclipboard">
      <description>copy the i-th snapshot to (the OS) clipboard.</description>
      <digest>copy snapshot to clipboard</digest>
    </method>
    <method name="/snapshot/[index]/copytoclipboard">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>copy the i-th snapshot to (the OS) clipboard, and specify the end-of-line character (e.g. ',').</description>
      <digest>copy snapshot to clipboard</digest>
    </method>
    <method name="/snapshot/[index]/export">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>export the i-th snapshot to file.</description>
      <digest>export snapshot</digest>
    </method>
    <method name="/snapshot/[index]/export/content">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>export the content of the i-th snapshot to file.</description>
      <digest>export snapshot content</digest>
    </method>
    <method name="/snapshot/export">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>export all snapshots to file.</description>
      <digest>export snapshots</digest>
    </method>
    <method name="/snapshot/import">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>import all snapshots from file.</description>
      <digest>export snapshots</digest>
    </method>
    <method name="/snapshot/recall/next">
      <description>recall the next snapshot.</description>
      <digest>recall next snapshot</digest>
    </method>
    <method name="/snapshot/recall/previous">
      <description>recall the previous snapshot.</description>
      <digest>recall previous snapshot</digest>
    </method>
    <method name="/snapshot/jump/next">
      <description>immediately recall the next snapshot (ignoring recall time).</description>
      <digest>immediately recall next snapshot</digest>
    </method>
    <method name="/snapshot/jump/previous">
      <description>immediately recall the previous snapshot (ignoring recall time).</description>
      <digest>immediately recall previous snapshot</digest>
    </method>
    <method name="/snapshot/recall">
      <arglist>
        <arg type="int"/>
      </arglist>
      <description>recall the i-th snapshot.</description>
      <digest>recall i-th snapshot</digest>
    </method>
    <method name="/snapshot/jump">
      <arglist>
        <arg type="int"/>
      </arglist>
      <description>immediately recall the i-th snapshot (ignoring recall time).</description>
      <digest>immediately recall i-th snapshot</digest>
    </method>
    <method name="/snapshot/recall/bytitle">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>recall a snapshot by title/name.</description>
      <digest>recall snapshot by title</digest>
    </method>
    <method name="/snapshot/jump/bytitle">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>immediately recall a snapshot by title/name (ignoring recall time).</description>
      <digest>immediately recall snapshot by title</digest>
    </method>
    <method name="/snapshot/lock">
      <arglist>
        <arg type="boolean"/>
      </arglist>
      <description>lock edition of the snapshots.</description>
      <digest>lock snapshots</digest>
    </method>
    <method name="/snapshot/renumber">
      <description>renumber the snapshots (their OSC pattern) based on their position.</description>
      <digest>renumber snapshots</digest>
    </method>
    <method name="/snapshot/sort">
      <description>sort the snapshots alphabetically (based on their titles).</description>
      <digest>sort snapshots alphabetically</digest>
    </method>
  </methodlist>
  <seealsolist>
    <seealso name="spat5.hoa.encoder~"/>
    <seealso name="spat5.decoder~"/>
    <seealso name="spat5.pan~"/>
    <seealso name="spat5.hoa.converter~"/>
    <seealso name="spat5.hoa.sorting~"/>
    <seealso name="spat5.hoa.optim~"/>
    <seealso name="spat5.hoa.rotate~"/>
    <seealso name="spat5.hoa.focus"/>
    <seealso name="spat5.hoa.focus~"/>
    <seealso name="spat5.hoa.blur~"/>
    <seealso name="spat5.panner.metrics"/>
    <seealso name="spat5.hoa.reduce~"/>
    <seealso name="spat5.hoa.shelving"/>
    <seealso name="spat5.hoa.warp~"/>
    <seealso name="spat5.hoa.dominance~"/>
    <seealso name="spat5.hoa.beam~"/>
    <seealso name="spat5.virtualspeakers~"/>
    <seealso name="spat5.hoa.binaural~"/>
    <seealso name="spat5.hoa.aformat~"/>
    <seealso name="spat5.hoa.scope~"/>
    <seealso name="spat5.hoa.intensity~"/>
    <seealso name="spat5.hoa.downscale~"/>
    <seealso name="spat5.hoa.directivity"/>
    <seealso name="spat5.hoa.equivalentorder"/>
    <seealso name="spat5.multi.connect"/>
    <seealso name="spat5.overview"/>
  </seealsolist>
</c74object>
