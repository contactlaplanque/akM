<?xml version="1.0" encoding="UTF-8" standalone="yes"?>

<!-- created by libisp v5.0.2 - 18-mar-2024 19:03:59 -->

<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>


<c74object name="spat5.pan" module="spat5">
  <digest>Control-rate amplitude panning</digest>
  <description><o>spat5.pan</o> computes and outputs a list of loudspeaker gains (linear gains) based on a given source position.It only works for amplitude panning laws (as opposed to time-difference methods such as AB stereo, binaural, etc.).<br/><br/>Reference(s) : <br/>V. Pulkki. Virtual Sound Source Positioning Using Vector Base Amplitude Panning. Journal of the Audio Engineering Society, 45(6):456 -- 466, June 1997. <br/><br/> T. Lossius, P. Balthazar, and T. de la Hogue. DBAP - Distance-Based Amplitude Panning. In Proc. of the International Computer Music Conference (ICMC), Montreal, Canada, 2009. <br/><br/> R. Sadek and C. Kyriakakis. A novel multichannel panning method for standard and arbitrary loudspeaker configurations. In Proc. of the 117th Convention of the Audio Engineering Society (AES), San Francisco, CA, USA, 2004. <br/><br/> J.-M. Pernaux, P. Boussard, and J.-M. Jot. Virtual Sound Source Positioning and Mixing in 5.1 Implementation on the Real-Time System Genesis. In Proc. of the Int Conference on Digital Audio Effects (DAFx), Barcelona, Spain, Nov 19-21, 1998. <br/><br/> J. Daniel. Representation de champs acoustiques, application a la transmission et a la reproduction de scenes sonores complexes dans un contexte multimedia. PhD thesis, Universite de Paris VI, 2001. <br/><br/> J. Daniel. Spatial Sound Encoding Including Near Field Effect: Introducing Distance Coding Filters and a Viable, New Ambisonic Format. In Proc of the AES 23rd International Conference, Copenhagen, Denmark, May 2003. <br/><br/> M. Neukom and J. C. Schacher. Ambisonics Equivalent Panning. In Proc. of the International Computer Music Conference (ICMC), Belfast, Ireland, 2008. <br/><br/> M. Neukom. Ambisonics Panning. In Proc. of the 123rd AES Convention, New York, NY, USA, Oct 2007. <br/><br/> J.-M. Jot, V. Larcher, and J.-M. Pernaux. A comparative study of 3-d audio encoding and rendering techniques. In Proc. of the 16th Audio Engineering Society International Conference on Spatial Sound Reproduction, Rovaniemi, Finland, 1999. <br/><br/> I. I. Bukvic. 3D time-based aural data representation using D4 library's layer based amplitude panning algorithm. Proc. of the 22nd International Conference on Auditory Display (ICAD), Canberra, Australia, July 2016. <br/><br/> M. A. Gerzon. General metatheory of auditory localization. In Proc. of the 92nd Convention of Audio Engineering Society (AES), Vienna, Austria, March 1992.<br/><br/></description>
  <inletlist>
  </inletlist>
  <outletlist>
  </outletlist>
  <objarglist>
  </objarglist>
  <attributelist>
    <attribute name="initwith" type="string" set="1" get="1" size="1">
      <description>The <m> initwith </m> attribute can be used to specify the initial state of the object. You should provide a list of comma-separated OSC commands. The list of messages should be quoted (with double quote character &quot;). This is similar to sending the list of commands via <o>loadbang</o> or <o>loadmess</o>.<br/> Have a look at the <i>spat5.tuto-osc-3.maxpat</i> example for further details.<br/> Note that the <m> initwith </m> attribute cannot be set via message, <o>attrui</o> or inspector; it must be typed directly within the object box.</description>
      <digest>initial state of the object</digest>
    </attribute>
    <attribute name="inputs" type="int" set="1" get="1" size="1">
      <description>The <m> inputs </m> attribute represents the number of input channels of the object. This  attribute must be set in the object box, when the object is instantiated; it can not be later set with a message (or <o>attrui</o> or inspector), since  the number of signal inlets or outlets can not be changed dynamically.</description>
      <digest>number of input channels</digest>
    </attribute>
    <attribute name="outputs" type="int" set="1" get="1" size="1">
      <description>The <m> outputs </m> attribute represents the number of output channels of the object. This  attribute must be set in the object box, when the object is instantiated; it can not be later set with a message (or <o>attrui</o> or inspector), since  the number of signal inlets or outlets can not be changed dynamically.</description>
      <digest>number of output channels</digest>
    </attribute>
  </attributelist>
  <methodlist>
    <method name="/panning/type">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>set panning type i.e. the type of algorithm used for rendering. A wide variety of panning methods are available, but there may be constraints depending on the number of inputs and/or outputs channels. <br/><br/>- &quot;binaural&quot; : binaural synthesis using HRTF (Head-Related Transfer Functions) filtering, for headphones only.<br/>- &quot;xy&quot; : simulates the recording of the sound scene by a coincident XY couple of microphones (intensity panning), for stereo only.<br/>- &quot;ms&quot; : simulates the recording of the sound scene by a mid-side microphone; this generates the M-S signals, and further requires decoding for L-R compatibility.<br/>- &quot;ab&quot; : simulates the recording of the sound scene by an AB couple of microphones (ORTF) i.e. it simulates a pair of spaced cardioid microphones, pointing laterally at azimuths +/- 55 degrees (elevation 0), with a distance of 17 cm between the two capsules; for stereo only.<br/>- &quot;stereopan&quot; : stereo panpot (intensity panning) with various panning laws, for stereo only.<br/>- &quot;angular&quot; : angular panning (intensity panning) for 2-D (horizontal only)  loudspeaker setups. &quot;angular&quot; panning is essentially the same as &quot;vbap2d&quot;, the main difference is how the panning gains evolve when moving the source from one speaker to another.<br/>- &quot;abap2d&quot; : angle-based amplitude panning : pairwise amplitude panning for 2-D (horizontal only) loudspeaker setups. Provides linear panning vs target azimuth angle.<br/>- &quot;abip2d&quot; : angle-based intensity panning : pairwise intensity panning for 2-D (horizontal only) loudspeaker setups. &quot;abip2d&quot; panning is essentially the same as &quot;vbip2d&quot;, the main difference is how the panning gains evolve when moving the source from one speaker to another.<br/>- &quot;vbap2d&quot; : vector base amplitude panning : pairwise amplitude panning for 2-D (horizontal only) loudspeaker setups, with power normalization of the gains.<br/>- &quot;vbap3d&quot; : vector base amplitude panning : amplitude panning for 3-D loudspeaker setups. The underlying algorithm creates a triangulation of the loudspeaker array, and depending on the position of the virtual source, it selects the appropriate loudspeaker triplet.<br/>- &quot;vbip2d&quot; : vector base intensity panning : pairwise intensity panning for 2-D (horizontal only)  loudspeaker setups. The geometrical algorithm is similar to &quot;vbap2d&quot;, however the speaker signals are normalized with constant intensity (rather than with constant power).<br/>- &quot;vbip3d&quot; : vector base intensity panning : pairwise intensity panning for 3-D loudspeaker setups. The geometrical algorithm is similar to &quot;vbap3d&quot;, however the speaker signals are normalized with constant intensity (rather than with constant power).<br/>- &quot;vbap&quot; : vector base amplitude panning : will switch automatically between &quot;vbap3d&quot; or &quot;vbap2d&quot;, depending on the loudspeaker setup.<br/>- &quot;vbip&quot; : vector base intensity panning : will switch automatically between &quot;vbip3d&quot; or &quot;vbip2d&quot;, depending on the loudspeaker setup.<br/>- &quot;dualbandvbp&quot; : vector base panning : uses vbap for low frequencies and vbip for high frequencies. (either 2-D or 3-D speaker setup)<br/>- &quot;lbap&quot; : layer based amplitude panning : this creates several vertical layers of loudspeakers, and operates each layer as a &quot;vbap2d&quot; setup. If the loudspeaker layout is planar, &quot;lbap&quot; is just the same as &quot;vbap2d&quot;.<br/>- &quot;sphericalheadmodel&quot; : binaural synthesis using an approximate spherical head model (Rayleigh) for both ILD and ITD. Elevation is not taken into account.<br/>- &quot;snowmanmodel&quot; : binaural synthesis using an approximate snow-man model for head-and-torso (two spherical models).<br/>- &quot;nearfieldbinaural&quot; : binaural synthesis using HRTF (Head-Related Transfer Functions) filtering, and with compensation (ITD and ILD) of nearfield effects.<br/>- &quot;hoa2d&quot; : 2-D (horizontal only) higher order ambisonic (HOA) encoder.<br/>- &quot;hoa3d&quot; : 3-D higher order ambisonic (HOA) encoder.<br/>- &quot;aep2d&quot; : ambisonic equivalent panning in 2-D (horizontal only) .<br/>- &quot;aep3d&quot; : ambisonic equivalent panning in 3-D.<br/>- &quot;spcap&quot; : speaker-placement correction amplitude panning.<br/>- &quot;nfchoa2d&quot; : 2-D (horizontal only) higher order ambisonic (HOA) encoder with Nearfield Compensation Filters (NFC).<br/>- &quot;nfchoa3d&quot; : 3-D higher order ambisonic (HOA) encoder with Nearfield Compensation Filters (NFC).<br/>- &quot;knn&quot; : K-nearest neighbors panning : applies amplitude panning on the K-nearest loudspeakers to the source. The (maximum) number K of contributing speakers can be specified with the &quot;/source/[index]/neighbors [int]&quot; message. This kind of panning is compatible with arbitrary loudspeaker setup (either 2D or 3D).<br/>- &quot;surround&quot; : LRS or LCRS encoder. Deprecated, don't use it.<br/>- &quot;panr&quot; : legacy panning law from spat v3.x. Deprecated, don't use it. Pair-wise panning over a regular arrangement of loudspeakers on a plane (2-D only).<br/>- &quot;dbap2d&quot; : distance-based amplitude panning on a 2-D (horizontal only) speaker setup (after Trond lossius).<br/>- &quot;dbap3d&quot; : .<br/>- &quot;subwoofers&quot; : combines a lowpass filter and a &quot;vbap2d&quot; panner.<br/>- &quot;wfs&quot; : wavefield synthesis for linear array of loudspeakers.<br/>- &quot;bformat&quot; : legacy Ambisonic B-format amplitude panning. Deprecated, don't use it anymore; use &quot;hoa2d&quot; or &quot;hoa3d&quot; instead.<br/>- &quot;laap&quot; : amplitude/intensity panning on a linear array of loudspeakers. Experimental prototype, don't use it.<br/><br/><br/>.<br/>Possible values: binaural, xy, ms, ab, stereopan, surround, panr, angular, abap2d, abip2d, dbap3d, dbap2d, vbap, vbip, vbap3d, vbip3d, vbap2d, vbap2damp, hybrid-vbap, vbip2d, dualbandvbp, bformat, hoa2d, hoa3d, nfchoa3d, nfchoa2d, spcap, csp, knn, aep2d, aep3d, subwoofers, wfs, lbap, laap, sphericalheadmodel, snowmanmodel, nearfieldbinaural.</description>
      <digest>set panning type</digest>
    </method>
    <method name="/panning/subtype">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>set panning subtype.</description>
      <digest>set panning subtype</digest>
    </method>
    <method name="/source/[index]/mute">
      <arglist>
        <arg type="boolean"/>
      </arglist>
      <description>mute/unmute the i-th source.</description>
      <digest>mute/unmute the i-th source</digest>
    </method>
    <method name="/source/[index]/xyz">
      <arglist>
        <arg type="number][number][number"/>
      </arglist>
      <description>set the position of the i-th source using cartesian coordinates.</description>
      <digest>set source position</digest>
    </method>
    <method name="/source/[index]/aed">
      <arglist>
        <arg type="number][number][number"/>
      </arglist>
      <description>set the position of the i-th source using navigation coordinates (azimuth/elevation/distance).</description>
      <digest>set source position</digest>
    </method>
    <method name="/source/[index]/xy">
      <arglist>
        <arg type="number][number"/>
      </arglist>
      <description>set the xy-coordinate of the i-th source, and use default z (=0).</description>
      <digest>set source position</digest>
    </method>
    <method name="/source/[index]/xy_">
      <arglist>
        <arg type="number][number"/>
      </arglist>
      <description>set the x and y-coordinate of the i-th source, and keep z unchanged.</description>
      <digest>set source position</digest>
    </method>
    <method name="/source/[index]/x">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set the x-coordinate of the i-th source, and keep y and z unchanged.</description>
      <digest>set source position</digest>
    </method>
    <method name="/source/[index]/y">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set the y-coordinate of the i-th source, and keep x and z unchanged.</description>
      <digest>set source position</digest>
    </method>
    <method name="/source/[index]/z">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set the z-coordinate of the i-th source, and keep x and y unchanged.</description>
      <digest>set source position</digest>
    </method>
    <method name="/source/[index]/az">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set the azimuth of the i-th source, using default distance (=1) and elevation (=0).</description>
      <digest>set source position</digest>
    </method>
    <method name="/source/[index]/ade">
      <arglist>
        <arg type="number][number][number"/>
      </arglist>
      <description>set the position of the i-th source using navigation coordinates (azimuth/distance/elevation).</description>
      <digest>set source position</digest>
    </method>
    <method name="/source/[index]/ae">
      <arglist>
        <arg type="number][number"/>
      </arglist>
      <description>set the azimuth/elevation of the i-th source, using default distance (=1).</description>
      <digest>set source position</digest>
    </method>
    <method name="/source/[index]/ad">
      <arglist>
        <arg type="number][number"/>
      </arglist>
      <description>set the azimuth/distance of the i-th source, using default elevation (=0).</description>
      <digest>set source position</digest>
    </method>
    <method name="/source/[index]/azim">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set the azimuth of the i-th source. Elevation and distance remain unchanged.</description>
      <digest>set source position</digest>
    </method>
    <method name="/source/[index]/elev">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set the elevation of the i-th source. Azimuth and distance remain unchanged.</description>
      <digest>set source position</digest>
    </method>
    <method name="/source/[index]/dist">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set the distance of the i-th source. Azimuth and elevation remain unchanged.</description>
      <digest>set source position</digest>
    </method>
    <method name="/source/[index]/azimelev">
      <arglist>
        <arg type="number][number"/>
      </arglist>
      <description>set the azimuth and elevation of the i-th source. Distance remains unchanged.</description>
      <digest>set source position</digest>
    </method>
    <method name="/source/[index]/azimdist">
      <arglist>
        <arg type="number][number"/>
      </arglist>
      <description>set the azimuth and distance of the i-th source. Elevation remains unchanged.</description>
      <digest>set source position</digest>
    </method>
    <method name="/sources/aed">
      <arglist>
        <arg type="nnnn..."/>
      </arglist>
      <description>set the list of source coordinates (with aed format).</description>
      <digest>set source positions</digest>
    </method>
    <method name="/sources/xyz">
      <arglist>
        <arg type="nnnn..."/>
      </arglist>
      <description>set the list of source coordinates (with xyz format).</description>
      <digest>set source positions</digest>
    </method>
    <method name="/sources/ade">
      <arglist>
        <arg type="nnnn..."/>
      </arglist>
      <description>set the list of source coordinates (with ade format).</description>
      <digest>set source positions</digest>
    </method>
    <method name="/sources/xy">
      <arglist>
        <arg type="nnnn..."/>
      </arglist>
      <description>set the list of source coordinates (with xy format).</description>
      <digest>set source positions</digest>
    </method>
    <method name="/sources/ae">
      <arglist>
        <arg type="nnnn..."/>
      </arglist>
      <description>set the list of source coordinates (with ae format).</description>
      <digest>set source positions</digest>
    </method>
    <method name="/source/[index]/spread/omni">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set omni spread (in %) for the i-th source.</description>
      <digest>set omni spread (in %) for the i-th source</digest>
    </method>
    <method name="/source/[index]/spread/law">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>set spread law for the i-th source.</description>
      <digest>set spread law for the i-th source</digest>
    </method>
    <method name="/source/[index]/spread/mode">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set spread mode for the i-th source.</description>
      <digest>set spread mode for the i-th source</digest>
    </method>
    <method name="/source/[index]/divergence">
      <arglist>
        <arg type="boolean"/>
      </arglist>
      <description>enable/disable divergence for the i-th source.</description>
      <digest>enable/disable divergence for the i-th source</digest>
    </method>
    <method name="/source/[index]/divergence/radius">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set minimum radius (in meters) for divergence for the i-th source.</description>
      <digest>set minimum radius (in meters) for divergence for the i-th source</digest>
    </method>
    <method name="/ramp/time">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set ramp time (in msec) for gain smoothing.</description>
      <digest>set ramp time (in msec) for gain smoothing</digest>
    </method>
    <method name="/format">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>set coordinate format used in the status window.</description>
      <digest>set coordinate format used in the status window</digest>
    </method>
    <method name="/post/version">
      <description>print the version in the Max Console.</description>
      <digest>post version</digest>
    </method>
    <method name="/post/version">
      <arglist>
        <arg type="details"/>
      </arglist>
      <description>print detailed version in the Max Console.</description>
      <digest>post version</digest>
    </method>
    <method name="/post/doc">
      <description>print the help documentation in the Max Console.</description>
      <digest>post documentation</digest>
    </method>
    <method name="/post/state">
      <description>print the OSC status in the Max Console.</description>
      <digest>post current state</digest>
    </method>
    <method name="/preset/load">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>load a preset from file. Supported file extensions : '.txt' for human-readable OSC text file, '.osc' for binary encoded OSC file, '.coll' for human-readable Max coll file (compatible with the <o>coll</o> object). '.txt' is the default file format. You can specify the fullpath of the file, or only its filename if the file is inside Max search path.</description>
      <digest>load preset</digest>
    </method>
    <method name="/preset/load">
      <description>open a user dialog to load a preset file. Supported file extensions : '.txt' for human-readable OSC text file, '.osc' for binary encoded OSC file, '.coll' for human-readable Max coll file (compatible with the <o>coll</o> object). '.txt' is the default file format.</description>
      <digest>load preset</digest>
    </method>
    <method name="/preset/export">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>export a preset to file. Supported file extensions : '.txt' for human-readable OSC text file, '.osc' for binary encoded OSC file, '.coll' for human-readable Max coll file (compatible with the <o>coll</o> object). '.txt' is the default file format. If the file extension is not provided, '.txt' will be used by default.  If the destination folder is not provided, the file will be saved in your home folder (/Users/yourlogin).</description>
      <digest>export preset</digest>
    </method>
    <method name="/preset/export">
      <description>open a user dialog to export a preset to file. Supported file extensions : '.txt' for human-readable OSC text file, '.osc' for binary encoded OSC file, '.coll' for human-readable Max coll file (compatible with the <o>coll</o> object). '.txt' is the default file format.</description>
      <digest>export preset</digest>
    </method>
    <method name="/status">
      <description>open the status window and bring it to front.</description>
      <digest>open status window</digest>
    </method>
    <method name="/status/open">
      <description>open the status window and bring it to front.</description>
      <digest>open status window</digest>
    </method>
    <method name="/status/close">
      <description>close the status window.</description>
      <digest>close status window</digest>
    </method>
    <method name="/status/openorclose">
      <description>open the status window if it was closed; close it if it was opened.</description>
      <digest>open status window</digest>
    </method>
    <method name="/status/font/size">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set the font size of the status window.</description>
      <digest>font size for status window</digest>
    </method>
    <method name="/status/floating">
      <arglist>
        <arg type="boolean"/>
      </arglist>
      <description>make the status window 'floating' (i.e. always on top of other windows).</description>
      <digest>statuswindow floating</digest>
    </method>
    <method name="/help">
      <description>open the help window and bring it to front.</description>
      <digest>open help window</digest>
    </method>
    <method name="/help/open">
      <description>open the help window and bring it to front.</description>
      <digest>open help window</digest>
    </method>
    <method name="/help/close">
      <description>close the help window.</description>
      <digest>close help window</digest>
    </method>
    <method name="/help/openorclose">
      <description>open the help window if it was closed; close it if it was opened.</description>
      <digest>open help window</digest>
    </method>
    <method name="/help/font/size">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set the font size of the help window.</description>
      <digest>font size for help window</digest>
    </method>
    <method name="/help/floating">
      <arglist>
        <arg type="boolean"/>
      </arglist>
      <description>make the help window 'floating' (i.e. always on top of other windows).</description>
      <digest>helpwindow floating</digest>
    </method>
    <method name="/snapshot">
      <description>open the snapshot window and bring it to front.</description>
      <digest>open snapshot window</digest>
    </method>
    <method name="/snapshot/open">
      <description>open the snapshot window and bring it to front.</description>
      <digest>open snapshot window</digest>
    </method>
    <method name="/snapshot/close">
      <description>close the snapshot window.</description>
      <digest>close snapshot window</digest>
    </method>
    <method name="/snapshot/openorclose">
      <description>open the snapshot window if it was closed; close it if it was opened.</description>
      <digest>open snapshot window</digest>
    </method>
    <method name="/snapshot/font/size">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set the font size of the snapshot window.</description>
      <digest>font size for snapshot window</digest>
    </method>
    <method name="/snapshot/floating">
      <arglist>
        <arg type="boolean"/>
      </arglist>
      <description>make the snapshot window 'floating' (i.e. always on top of other windows).</description>
      <digest>snapshotwindow floating</digest>
    </method>
    <method name="/status/copytoclipboard">
      <description>copy the status to (the OS) clipboard.</description>
      <digest>copy status to clipboard</digest>
    </method>
    <method name="/status/copytoclipboard">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>copy the status to (the OS) clipboard, and specify the end-of-line character (e.g. ',').</description>
      <digest>copy status to clipboard</digest>
    </method>
    <method name="/dump">
      <description>dump the complete state of the object over the rightmost outlet (a.k.a. dump outlet).</description>
      <digest>dump state</digest>
    </method>
    <method name="/dump">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>dump a subset of the state of the object over the rightmost outlet. See spat5.tuto-dump-1.maxpat for usage examples.</description>
      <digest>dump state</digest>
    </method>
    <method name="/snapshot/deleteall">
      <description>delete all the snapshots currently in memory.</description>
      <digest>clear snapshots</digest>
    </method>
    <method name="/snapshot/add">
      <description>create a new snapshot with the current state.</description>
      <digest>add a new snapshot</digest>
    </method>
    <method name="/snapshot/add">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>create a new snapshot with the current state, and set its name.</description>
      <digest>add a new snapshot</digest>
    </method>
    <method name="/snapshot/[index]/store">
      <description>store the current state in the i-th snapshot (in memory).</description>
      <digest>store snapshot</digest>
    </method>
    <method name="/snapshot/[index]/recall">
      <description>recall the current state from the i-th snapshot.</description>
      <digest>recall snapshot</digest>
    </method>
    <method name="/snapshot/[index]/jump">
      <description>immediately recall the current state from the i-th snapshot (ignoring recall time).</description>
      <digest>immediately recall snapshot</digest>
    </method>
    <method name="/snapshot/[index]/name">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>set the name of the i-th snapshot.</description>
      <digest>set snapshot name</digest>
    </method>
    <method name="/snapshot/interpolate">
      <arglist>
        <arg type="int][int][number"/>
      </arglist>
      <description>interpolate between the i-th and j-th snapshots.</description>
      <digest>interpolate between two snapshots</digest>
    </method>
    <method name="/snapshot/interpolate">
      <arglist>
        <arg type="string][string][number"/>
      </arglist>
      <description>interpolate between two snapshots, given their names.</description>
      <digest>interpolate between two snapshots</digest>
    </method>
    <method name="/snapshot/[index]/delete">
      <description>delete the i-th snapshot.</description>
      <digest>delete snapshot</digest>
    </method>
    <method name="/snapshot/[index]/copytoclipboard">
      <description>copy the i-th snapshot to (the OS) clipboard.</description>
      <digest>copy snapshot to clipboard</digest>
    </method>
    <method name="/snapshot/[index]/copytoclipboard">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>copy the i-th snapshot to (the OS) clipboard, and specify the end-of-line character (e.g. ',').</description>
      <digest>copy snapshot to clipboard</digest>
    </method>
    <method name="/snapshot/[index]/export">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>export the i-th snapshot to file.</description>
      <digest>export snapshot</digest>
    </method>
    <method name="/snapshot/[index]/export/content">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>export the content of the i-th snapshot to file.</description>
      <digest>export snapshot content</digest>
    </method>
    <method name="/snapshot/export">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>export all snapshots to file.</description>
      <digest>export snapshots</digest>
    </method>
    <method name="/snapshot/import">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>import all snapshots from file.</description>
      <digest>export snapshots</digest>
    </method>
    <method name="/snapshot/recall/next">
      <description>recall the next snapshot.</description>
      <digest>recall next snapshot</digest>
    </method>
    <method name="/snapshot/recall/previous">
      <description>recall the previous snapshot.</description>
      <digest>recall previous snapshot</digest>
    </method>
    <method name="/snapshot/jump/next">
      <description>immediately recall the next snapshot (ignoring recall time).</description>
      <digest>immediately recall next snapshot</digest>
    </method>
    <method name="/snapshot/jump/previous">
      <description>immediately recall the previous snapshot (ignoring recall time).</description>
      <digest>immediately recall previous snapshot</digest>
    </method>
    <method name="/snapshot/recall">
      <arglist>
        <arg type="int"/>
      </arglist>
      <description>recall the i-th snapshot.</description>
      <digest>recall i-th snapshot</digest>
    </method>
    <method name="/snapshot/jump">
      <arglist>
        <arg type="int"/>
      </arglist>
      <description>immediately recall the i-th snapshot (ignoring recall time).</description>
      <digest>immediately recall i-th snapshot</digest>
    </method>
    <method name="/snapshot/recall/bytitle">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>recall a snapshot by title/name.</description>
      <digest>recall snapshot by title</digest>
    </method>
    <method name="/snapshot/jump/bytitle">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>immediately recall a snapshot by title/name (ignoring recall time).</description>
      <digest>immediately recall snapshot by title</digest>
    </method>
    <method name="/snapshot/lock">
      <arglist>
        <arg type="boolean"/>
      </arglist>
      <description>lock edition of the snapshots.</description>
      <digest>lock snapshots</digest>
    </method>
    <method name="/snapshot/renumber">
      <description>renumber the snapshots (their OSC pattern) based on their position.</description>
      <digest>renumber snapshots</digest>
    </method>
    <method name="/snapshot/sort">
      <description>sort the snapshots alphabetically (based on their titles).</description>
      <digest>sort snapshots alphabetically</digest>
    </method>
  </methodlist>
  <seealsolist>
    <seealso name="spat5.pan~"/>
    <seealso name="spat5.pansig~"/>
    <seealso name="spat5.spat~"/>
    <seealso name="matrix~"/>
    <seealso name="spat5.viewer"/>
    <seealso name="spat5.trajectories"/>
    <seealso name="spat5.panner.metrics"/>
    <seealso name="spat5.overview"/>
  </seealsolist>
</c74object>
