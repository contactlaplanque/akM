<?xml version="1.0" encoding="UTF-8" standalone="yes"?>

<!-- created by libisp v5.0.2 - 18-mar-2024 19:03:59 -->

<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>


<c74object name="spat5.panner.metrics.embedded" module="spat5">
  <digest>Panner metrics</digest>
  <description>spat5.panner.metrics computes and displays several quality criteria for amplitude panners (and HOA decoders).<br/><br/>Reference(s) : <br/>M. A. Gerzon. General metatheory of auditory localization. In Proc. of the 92nd Convention of Audio Engineering Society (AES), Vienna, Austria, March 1992. <br/><br/> J. Daniel. Representation de champs acoustiques, application a la transmission et a la reproduction de scenes sonores complexes dans un contexte multimedia. PhD thesis, Universite de Paris VI, 2001. <br/><br/> N. Epain, C. Jin, and F. Zotter. Ambisonic decoding with constant angular spread. Acta Acustica united with Acustica, 100:928 -- 936, 2014. <br/><br/> F. Zotter, H. Pomberger, and M. Noisternig. Energy-preserving ambisonic decoding. Acta Acustica united with Acustica, 98:37 -- 47, 2012. <br/><br/> F. Zotter, M. Frank, and H. Pomberger. Comparison of energy-preserving and all-round Ambisonic decoders. In Proc. the Fortschritte der Akustik, AIA-DAGA, March 2013. <br/><br/> F. Zotter, M. Frank. Ambisonics: A Practical 3D Audio Theory for Recording, Studio Production, Sound Reinforcement, and Virtual Reality. Springer, 2019.<br/><br/></description>
  <inletlist>
  </inletlist>
  <outletlist>
  </outletlist>
  <objarglist>
  </objarglist>
  <attributelist>
    <attribute name="embed" type="boolean" set="1" get="1" size="1">
      <description>The <m> embed </m> attribute allows to store the state of the object within the patcher. The complete state of the object is stored whenever the patcher is saved to disk. Upon loading the patcher or copying the object box, the state is restored.</description>
      <digest>store state within the patcher</digest>
    </attribute>
    <attribute name="initwith" type="string" set="1" get="1" size="1">
      <description>The <m> initwith </m> attribute can be used to specify the initial state of the object. You should provide a list of comma-separated OSC commands. The list of messages should be quoted (with double quote character &quot;). This is similar to sending the list of commands via <o>loadbang</o> or <o>loadmess</o>.<br/> Have a look at the <i>spat5.tuto-osc-3.maxpat</i> example for further details.<br/> Note that the <m> initwith </m> attribute cannot be set via message, <o>attrui</o> or inspector; it must be typed directly within the object box.</description>
      <digest>initial state of the object</digest>
    </attribute>
    <attribute name="parameter_enable" type="boolean" set="1" get="1" size="1">
      <description>The <m> parameter_enable </m> attribute is used for compatibility with Max snapshots. It can also be used to store the initial state of the object (see 'Initial Enable' in the Max inspector).</description>
      <digest>compatibility with snapshots</digest>
    </attribute>
  </attributelist>
  <methodlist>
    <method name="/speakers/number">
      <arglist>
        <arg type="int"/>
      </arglist>
      <description>set the number of loudspeakers.</description>
      <digest>set the number of loudspeakers</digest>
    </method>
    <method name="/speakers/aed">
      <arglist>
        <arg type="nnnn..."/>
      </arglist>
      <description>set the list of speaker coordinates (with aed format).</description>
      <digest>set speaker positions</digest>
    </method>
    <method name="/speakers/xyz">
      <arglist>
        <arg type="nnnn..."/>
      </arglist>
      <description>set the list of speaker coordinates (with xyz format).</description>
      <digest>set speaker positions</digest>
    </method>
    <method name="/speakers/ade">
      <arglist>
        <arg type="nnnn..."/>
      </arglist>
      <description>set the list of speaker coordinates (with ade format).</description>
      <digest>set speaker positions</digest>
    </method>
    <method name="/speakers/xy">
      <arglist>
        <arg type="nnnn..."/>
      </arglist>
      <description>set the list of speaker coordinates (with xy format).</description>
      <digest>set speaker positions</digest>
    </method>
    <method name="/speakers/ae">
      <arglist>
        <arg type="nnnn..."/>
      </arglist>
      <description>set the list of speaker coordinates (with ae format).</description>
      <digest>set speaker positions</digest>
    </method>
    <method name="/speaker/[index]/aed">
      <arglist>
        <arg type="number][number][number"/>
      </arglist>
      <description>set the position of the i-th loudspeaker using navigation coordinates (azimuth/elevation/distance).</description>
      <digest>set speaker position</digest>
    </method>
    <method name="/speaker/[index]/ade">
      <arglist>
        <arg type="number][number][number"/>
      </arglist>
      <description>set the position of the i-th loudspeaker using navigation coordinates (azimuth/distance/elevation).</description>
      <digest>set speaker position</digest>
    </method>
    <method name="/speaker/[index]/xyz">
      <arglist>
        <arg type="number][number][number"/>
      </arglist>
      <description>set the position of the i-th loudspeaker using cartesian coordinates.</description>
      <digest>set speaker position</digest>
    </method>
    <method name="/speaker/[index]/xy">
      <arglist>
        <arg type="number][number"/>
      </arglist>
      <description>set the xy-coordinate of the i-th loudspeaker, and use default z (=0).</description>
      <digest>set speaker position</digest>
    </method>
    <method name="/speaker/[index]/ae">
      <arglist>
        <arg type="number][number"/>
      </arglist>
      <description>set the azimuth/elevation of the i-th loudspeaker, using default distance (=1).</description>
      <digest>set speaker position</digest>
    </method>
    <method name="/speaker/[index]/az">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set the azimuth of the i-th loudspeaker, using default distance (=1) and elevation (=0).</description>
      <digest>set speaker position</digest>
    </method>
    <method name="/display/mode">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>set display mode.<br/>Possible values: energy, re, rv, energy vector angular error, velocity vector angular error, angular spread, spreaddaniel, spreadfrank, re vs rv direction difference, re directions, rv directions.</description>
    </method>
    <method name="/display/range">
      <arglist>
        <arg type="number][number"/>
      </arglist>
      <description>set display range.</description>
      <digest>set display range</digest>
    </method>
    <method name="/colormap">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>set type of colormap.<br/>Possible values: jet, hsv, gray, hot, summer, winter, spring, autumn, cool, parula, bone, copper, pink, lines, colorcube, prism, flag, magma, inferno, plasma, viridis, cividis, moreland, yellowred, turbo, twilight, blues, amber, dusk, tree, emerald, ghostlight, neutral, seasons, swamp, redshift, bubblegum, watermelon, rainforest, sepia, cosmic, toxic, freeze, gem, viola, horizon, gothic, flamingo, neon, sapphire, sunburst, torch, pepper, lilac, nuclear, prinsenvlag, lavender, guppy, jungle, savanna, wildfire, emergency, voltage, ember, chroma, apple, holly, tropical, fusion, infinity, arctic, seaweed, pride, eclipse, fall, ocean, iceburn, waterlily, amethyst.</description>
    </method>
    <method name="/cursor/visible">
      <arglist>
        <arg type="boolean"/>
      </arglist>
      <description>set cursor visibility.</description>
      <digest>set cursor visibility</digest>
    </method>
    <method name="/speakers/label/color">
      <arglist>
        <arg type="color"/>
      </arglist>
      <description>set speaker labels color.</description>
      <digest>set speaker labels color</digest>
    </method>
    <method name="/speakers/label/visible">
      <arglist>
        <arg type="boolean"/>
      </arglist>
      <description>display speaker labels.</description>
      <digest>display speaker labels</digest>
    </method>
    <method name="/post/version">
      <description>print the version in the Max Console.</description>
      <digest>post version</digest>
    </method>
    <method name="/post/version">
      <arglist>
        <arg type="details"/>
      </arglist>
      <description>print detailed version in the Max Console.</description>
      <digest>post version</digest>
    </method>
    <method name="/post/doc">
      <description>print the help documentation in the Max Console.</description>
      <digest>post documentation</digest>
    </method>
    <method name="/post/state">
      <description>print the OSC status in the Max Console.</description>
      <digest>post current state</digest>
    </method>
    <method name="/preset/load">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>load a preset from file. Supported file extensions : '.txt' for human-readable OSC text file, '.osc' for binary encoded OSC file, '.coll' for human-readable Max coll file (compatible with the <o>coll</o> object). '.txt' is the default file format. You can specify the fullpath of the file, or only its filename if the file is inside Max search path.</description>
      <digest>load preset</digest>
    </method>
    <method name="/preset/load">
      <description>open a user dialog to load a preset file. Supported file extensions : '.txt' for human-readable OSC text file, '.osc' for binary encoded OSC file, '.coll' for human-readable Max coll file (compatible with the <o>coll</o> object). '.txt' is the default file format.</description>
      <digest>load preset</digest>
    </method>
    <method name="/preset/export">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>export a preset to file. Supported file extensions : '.txt' for human-readable OSC text file, '.osc' for binary encoded OSC file, '.coll' for human-readable Max coll file (compatible with the <o>coll</o> object). '.txt' is the default file format. If the file extension is not provided, '.txt' will be used by default.  If the destination folder is not provided, the file will be saved in your home folder (/Users/yourlogin).</description>
      <digest>export preset</digest>
    </method>
    <method name="/preset/export">
      <description>open a user dialog to export a preset to file. Supported file extensions : '.txt' for human-readable OSC text file, '.osc' for binary encoded OSC file, '.coll' for human-readable Max coll file (compatible with the <o>coll</o> object). '.txt' is the default file format.</description>
      <digest>export preset</digest>
    </method>
    <method name="/status">
      <description>open the status window and bring it to front.</description>
      <digest>open status window</digest>
    </method>
    <method name="/status/open">
      <description>open the status window and bring it to front.</description>
      <digest>open status window</digest>
    </method>
    <method name="/status/close">
      <description>close the status window.</description>
      <digest>close status window</digest>
    </method>
    <method name="/status/openorclose">
      <description>open the status window if it was closed; close it if it was opened.</description>
      <digest>open status window</digest>
    </method>
    <method name="/status/font/size">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set the font size of the status window.</description>
      <digest>font size for status window</digest>
    </method>
    <method name="/status/floating">
      <arglist>
        <arg type="boolean"/>
      </arglist>
      <description>make the status window 'floating' (i.e. always on top of other windows).</description>
      <digest>statuswindow floating</digest>
    </method>
    <method name="/help">
      <description>open the help window and bring it to front.</description>
      <digest>open help window</digest>
    </method>
    <method name="/help/open">
      <description>open the help window and bring it to front.</description>
      <digest>open help window</digest>
    </method>
    <method name="/help/close">
      <description>close the help window.</description>
      <digest>close help window</digest>
    </method>
    <method name="/help/openorclose">
      <description>open the help window if it was closed; close it if it was opened.</description>
      <digest>open help window</digest>
    </method>
    <method name="/help/font/size">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set the font size of the help window.</description>
      <digest>font size for help window</digest>
    </method>
    <method name="/help/floating">
      <arglist>
        <arg type="boolean"/>
      </arglist>
      <description>make the help window 'floating' (i.e. always on top of other windows).</description>
      <digest>helpwindow floating</digest>
    </method>
    <method name="/snapshot">
      <description>open the snapshot window and bring it to front.</description>
      <digest>open snapshot window</digest>
    </method>
    <method name="/snapshot/open">
      <description>open the snapshot window and bring it to front.</description>
      <digest>open snapshot window</digest>
    </method>
    <method name="/snapshot/close">
      <description>close the snapshot window.</description>
      <digest>close snapshot window</digest>
    </method>
    <method name="/snapshot/openorclose">
      <description>open the snapshot window if it was closed; close it if it was opened.</description>
      <digest>open snapshot window</digest>
    </method>
    <method name="/snapshot/font/size">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set the font size of the snapshot window.</description>
      <digest>font size for snapshot window</digest>
    </method>
    <method name="/snapshot/floating">
      <arglist>
        <arg type="boolean"/>
      </arglist>
      <description>make the snapshot window 'floating' (i.e. always on top of other windows).</description>
      <digest>snapshotwindow floating</digest>
    </method>
    <method name="/status/copytoclipboard">
      <description>copy the status to (the OS) clipboard.</description>
      <digest>copy status to clipboard</digest>
    </method>
    <method name="/status/copytoclipboard">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>copy the status to (the OS) clipboard, and specify the end-of-line character (e.g. ',').</description>
      <digest>copy status to clipboard</digest>
    </method>
    <method name="/dump">
      <description>dump the complete state of the object over the rightmost outlet (a.k.a. dump outlet).</description>
      <digest>dump state</digest>
    </method>
    <method name="/dump">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>dump a subset of the state of the object over the rightmost outlet. See spat5.tuto-dump-1.maxpat for usage examples.</description>
      <digest>dump state</digest>
    </method>
    <method name="/snapshot/deleteall">
      <description>delete all the snapshots currently in memory.</description>
      <digest>clear snapshots</digest>
    </method>
    <method name="/snapshot/add">
      <description>create a new snapshot with the current state.</description>
      <digest>add a new snapshot</digest>
    </method>
    <method name="/snapshot/add">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>create a new snapshot with the current state, and set its name.</description>
      <digest>add a new snapshot</digest>
    </method>
    <method name="/snapshot/[index]/store">
      <description>store the current state in the i-th snapshot (in memory).</description>
      <digest>store snapshot</digest>
    </method>
    <method name="/snapshot/[index]/recall">
      <description>recall the current state from the i-th snapshot.</description>
      <digest>recall snapshot</digest>
    </method>
    <method name="/snapshot/[index]/jump">
      <description>immediately recall the current state from the i-th snapshot (ignoring recall time).</description>
      <digest>immediately recall snapshot</digest>
    </method>
    <method name="/snapshot/[index]/name">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>set the name of the i-th snapshot.</description>
      <digest>set snapshot name</digest>
    </method>
    <method name="/snapshot/interpolate">
      <arglist>
        <arg type="int][int][number"/>
      </arglist>
      <description>interpolate between the i-th and j-th snapshots.</description>
      <digest>interpolate between two snapshots</digest>
    </method>
    <method name="/snapshot/interpolate">
      <arglist>
        <arg type="string][string][number"/>
      </arglist>
      <description>interpolate between two snapshots, given their names.</description>
      <digest>interpolate between two snapshots</digest>
    </method>
    <method name="/snapshot/[index]/delete">
      <description>delete the i-th snapshot.</description>
      <digest>delete snapshot</digest>
    </method>
    <method name="/snapshot/[index]/copytoclipboard">
      <description>copy the i-th snapshot to (the OS) clipboard.</description>
      <digest>copy snapshot to clipboard</digest>
    </method>
    <method name="/snapshot/[index]/copytoclipboard">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>copy the i-th snapshot to (the OS) clipboard, and specify the end-of-line character (e.g. ',').</description>
      <digest>copy snapshot to clipboard</digest>
    </method>
    <method name="/snapshot/[index]/export">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>export the i-th snapshot to file.</description>
      <digest>export snapshot</digest>
    </method>
    <method name="/snapshot/[index]/export/content">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>export the content of the i-th snapshot to file.</description>
      <digest>export snapshot content</digest>
    </method>
    <method name="/snapshot/export">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>export all snapshots to file.</description>
      <digest>export snapshots</digest>
    </method>
    <method name="/snapshot/import">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>import all snapshots from file.</description>
      <digest>export snapshots</digest>
    </method>
    <method name="/snapshot/recall/next">
      <description>recall the next snapshot.</description>
      <digest>recall next snapshot</digest>
    </method>
    <method name="/snapshot/recall/previous">
      <description>recall the previous snapshot.</description>
      <digest>recall previous snapshot</digest>
    </method>
    <method name="/snapshot/jump/next">
      <description>immediately recall the next snapshot (ignoring recall time).</description>
      <digest>immediately recall next snapshot</digest>
    </method>
    <method name="/snapshot/jump/previous">
      <description>immediately recall the previous snapshot (ignoring recall time).</description>
      <digest>immediately recall previous snapshot</digest>
    </method>
    <method name="/snapshot/recall">
      <arglist>
        <arg type="int"/>
      </arglist>
      <description>recall the i-th snapshot.</description>
      <digest>recall i-th snapshot</digest>
    </method>
    <method name="/snapshot/jump">
      <arglist>
        <arg type="int"/>
      </arglist>
      <description>immediately recall the i-th snapshot (ignoring recall time).</description>
      <digest>immediately recall i-th snapshot</digest>
    </method>
    <method name="/snapshot/recall/bytitle">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>recall a snapshot by title/name.</description>
      <digest>recall snapshot by title</digest>
    </method>
    <method name="/snapshot/jump/bytitle">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>immediately recall a snapshot by title/name (ignoring recall time).</description>
      <digest>immediately recall snapshot by title</digest>
    </method>
    <method name="/snapshot/lock">
      <arglist>
        <arg type="boolean"/>
      </arglist>
      <description>lock edition of the snapshots.</description>
      <digest>lock snapshots</digest>
    </method>
    <method name="/snapshot/renumber">
      <description>renumber the snapshots (their OSC pattern) based on their position.</description>
      <digest>renumber snapshots</digest>
    </method>
    <method name="/snapshot/sort">
      <description>sort the snapshots alphabetically (based on their titles).</description>
      <digest>sort snapshots alphabetically</digest>
    </method>
  </methodlist>
  <seealsolist>
    <seealso name="spat5.hoa.decoder~"/>
    <seealso name="spat5.pan"/>
    <seealso name="spat5.pan~"/>
    <seealso name="spat5.viewer"/>
    <seealso name="spat5.grids"/>
    <seealso name="spat5.speaker.layout"/>
    <seealso name="spat5.multi.connect"/>
    <seealso name="spat5.overview"/>
  </seealsolist>
</c74object>
