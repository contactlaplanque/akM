<?xml version="1.0" encoding="UTF-8" standalone="yes"?>

<!-- created by libisp v5.0.2 - 18-mar-2024 19:03:59 -->

<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>


<c74object name="spat5.granulator~" module="spat5">
  <digest>Multichannel granular synthesis</digest>
  <description><o>spat5.granulator~</o> is a multichannel granular synthesis processor.<br/><br/>Reference(s) : <br/>B. Truax. Real-time granular synthesis with a digital signal processor. Computer Music Journal, 12(2):14 -- 26, Summer 1988.<br/><br/></description>
  <inletlist>
  </inletlist>
  <outletlist>
  </outletlist>
  <objarglist>
  </objarglist>
  <attributelist>
    <attribute name="initwith" type="string" set="1" get="1" size="1">
      <description>The <m> initwith </m> attribute can be used to specify the initial state of the object. You should provide a list of comma-separated OSC commands. The list of messages should be quoted (with double quote character &quot;). This is similar to sending the list of commands via <o>loadbang</o> or <o>loadmess</o>.<br/> Have a look at the <i>spat5.tuto-osc-3.maxpat</i> example for further details.<br/> Note that the <m> initwith </m> attribute cannot be set via message, <o>attrui</o> or inspector; it must be typed directly within the object box.</description>
      <digest>initial state of the object</digest>
    </attribute>
    <attribute name="mc" type="int" set="1" get="1" size="1">
      <description>The <m> mc </m> attribute enables multichannel patch-cord for this object (compatible with Max8 or higher). Note that the <m> mc </m> attribute cannot be set via message, <o>attrui</o> or inspector; it must be typed directly within the object box.</description>
      <digest>multichannel patch-cord</digest>
    </attribute>
    <attribute name="outputs" type="int" set="1" get="1" size="1">
      <description>The <m> outputs </m> attribute represents the number of output channels of the object. This  attribute must be set in the object box, when the object is instantiated; it can not be later set with a message (or <o>attrui</o> or inspector), since  the number of signal inlets or outlets can not be changed dynamically.</description>
      <digest>number of output channels</digest>
    </attribute>
    <attribute name="parameter_enable" type="boolean" set="1" get="1" size="1">
      <description>The <m> parameter_enable </m> attribute is used for compatibility with Max snapshots. It can also be used to store the initial state of the object (see 'Initial Enable' in the Max inspector).</description>
      <digest>compatibility with snapshots</digest>
    </attribute>
  </attributelist>
  <methodlist>
    <method name="/delay/length">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set length of the ring buffer (in msec).</description>
      <digest>set length of the ring buffer (in msec)</digest>
    </method>
    <method name="/grains/number">
      <arglist>
        <arg type="int"/>
      </arglist>
      <description>set the maximum number of overlapping grains.</description>
      <digest>set the maximum number of overlapping grains</digest>
    </method>
    <method name="/grains/gain">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set gain of the grains (linear scale).</description>
      <digest>set gain of the grains (linear scale)</digest>
    </method>
    <method name="/grains/gain/db">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set gain of the grains (dB scale).</description>
      <digest>set gain of the grains (dB scale)</digest>
    </method>
    <method name="/grains/gain/variation">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set amount of (random) variation for the gain of the grains.</description>
      <digest>set amount of (random) variation for the gain of the grains</digest>
    </method>
    <method name="/grains/speed">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set playback speed of the grains (in %).</description>
      <digest>set playback speed of the grains (in %)</digest>
    </method>
    <method name="/grains/speed/variation">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set amount of (random) variation for playback speed of the grains.</description>
      <digest>set amount of (random) variation for playback speed of the grains</digest>
    </method>
    <method name="/grains/position">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set playback position of the grains (in % of the ring buffer length). Negative values will generate random positions.</description>
      <digest>set playback position of the grains (in % of the ring buffer length). Negative values will generate random positions</digest>
    </method>
    <method name="/grains/duration">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set duration of the grains (in msec).</description>
      <digest>set duration of the grains (in msec)</digest>
    </method>
    <method name="/grains/duration/variation">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set amount of (random) variation for the duration of the grains.</description>
      <digest>set amount of (random) variation for the duration of the grains</digest>
    </method>
    <method name="/grains/duration/min">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set minimum duration of the grains.</description>
      <digest>set minimum duration of the grains</digest>
    </method>
    <method name="/grains/duration/max">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set maximum duration of the grains.</description>
      <digest>set maximum duration of the grains</digest>
    </method>
    <method name="/grains/period">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set time between consecutive grains (in msec).</description>
      <digest>set time between consecutive grains (in msec)</digest>
    </method>
    <method name="/grains/period/variation">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set amount of (random) variation for time between consecutive grains (in %).</description>
      <digest>set amount of (random) variation for time between consecutive grains (in %)</digest>
    </method>
    <method name="/grains/attack">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set attack time of the grains (in % of the grain duration).</description>
      <digest>set attack time of the grains (in % of the grain duration)</digest>
    </method>
    <method name="/grains/release">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set attack time of the grains (in % of the grain duration).</description>
      <digest>set attack time of the grains (in % of the grain duration)</digest>
    </method>
    <method name="/grains/direction">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>set playback direction of the grains.</description>
      <digest>set playback direction of the grains</digest>
    </method>
    <method name="/grains/destination">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>set output channel of the grains.</description>
      <digest>set output channel of the grains</digest>
    </method>
    <method name="/grains/filter/type">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>set filter type for grains.</description>
      <digest>set filter type for grains</digest>
    </method>
    <method name="/grains/filter/freq">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set frequency (in Hz) for grains filtering.</description>
      <digest>set frequency (in Hz) for grains filtering</digest>
    </method>
    <method name="/grains/filter/freq/variation">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set amount of (random) variation for frequency for grains filtering.</description>
      <digest>set amount of (random) variation for frequency for grains filtering</digest>
    </method>
    <method name="/grains/filter/freq/min">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set minimum frequency for grains filtering.</description>
      <digest>set minimum frequency for grains filtering</digest>
    </method>
    <method name="/grains/filter/freq/max">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set maximum for frequency for grains filtering.</description>
      <digest>set maximum for frequency for grains filtering</digest>
    </method>
    <method name="/grains/filter/q">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set resonance for grains filtering.</description>
      <digest>set resonance for grains filtering</digest>
    </method>
    <method name="/grains/filter/q/variation">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set amount of (random) variation for Q for grains filtering.</description>
      <digest>set amount of (random) variation for Q for grains filtering</digest>
    </method>
    <method name="/grains/filter/gain">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set gain (in dB) for grains filtering.</description>
      <digest>set gain (in dB) for grains filtering</digest>
    </method>
    <method name="/grains/filter/gain/variation">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set amount of (random) variation for gain for grains filtering.</description>
      <digest>set amount of (random) variation for gain for grains filtering</digest>
    </method>
    <method name="/delay/clear">
      <description>brutally clear the ring buffer.</description>
      <digest>brutally clear the ring buffer</digest>
    </method>
    <method name="/stop">
      <description>brutally stop all grains currently playing.</description>
      <digest>brutally stop all grains currently playing</digest>
    </method>
    <method name="/freeze">
      <arglist>
        <arg type="boolean"/>
      </arglist>
      <description>freeze the ring buffer i.e. stop recording the incoming samples.</description>
      <digest>freeze the ring buffer i.e. stop recording the incoming samples</digest>
    </method>
    <method name="/gain/compensation">
      <arglist>
        <arg type="boolean"/>
      </arglist>
      <description>apply an output gain compensation, taken into account the number of overlapping grains.</description>
      <digest>apply an output gain compensation, taken into account the number of overlapping grains</digest>
    </method>
    <method name="/seed">
      <description>change the seed for random number generators.</description>
      <digest>change the seed for random number generators</digest>
    </method>
    <method name="/seed">
      <arglist>
        <arg type="int"/>
      </arglist>
      <description>set the seed for random number generators.</description>
      <digest>set the seed for random number generators</digest>
    </method>
    <method name="/dsp/mute">
      <arglist>
        <arg type="boolean"/>
      </arglist>
      <description>mute the DSP rendering. CPU resources are not used when the DSP is muted.  A smooth ramp is applied  (see /dsp/mute/ramptime).</description>
      <digest>mute DSP</digest>
    </method>
    <method name="/dsp/mute">
      <arglist>
        <arg type="boolean][number"/>
      </arglist>
      <description>mute the DSP rendering. CPU resources are not used when the DSP is muted.  A smooth ramp is applied; the second argument specifies the length (in msec) of the ramp.</description>
      <digest>mute DSP</digest>
    </method>
    <method name="/dsp/mute/ramptime">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set ramp time (in msec) for mute/unmute.</description>
      <digest>mute ramp time</digest>
    </method>
    <method name="/dsp/bypass">
      <arglist>
        <arg type="boolean"/>
      </arglist>
      <description>bypass the DSP rendering. CPU resources are not used when the DSP is bypassed.  A smooth ramp of is applied (see /dsp/bypass/ramptime).</description>
      <digest>bypass DSP</digest>
    </method>
    <method name="/dsp/bypass">
      <arglist>
        <arg type="boolean][number"/>
      </arglist>
      <description>mute the DSP rendering. CPU resources are not used when the DSP is muted.  A smooth ramp is applied; the second argument specifies the length (in msec) of the ramp.</description>
      <digest>bypass DSP</digest>
    </method>
    <method name="/dsp/bypass/ramptime">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set ramp time (in msec) for bypass.</description>
      <digest>bypass ramp time</digest>
    </method>
    <method name="/dsp/automute">
      <arglist>
        <arg type="boolean"/>
      </arglist>
      <description>enable/disable the auto-mute (i.e. disable audio computation when incoming signals are 0).</description>
      <digest>enable auto-mute</digest>
    </method>
    <method name="/dsp/automute/attack">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set the duration (in seconds) before auto-muting.</description>
      <digest>auto-mute attack time</digest>
    </method>
    <method name="/dsp/post">
      <description>post various information to the Max console (audio should be turned on).</description>
      <digest>post information</digest>
    </method>
    <method name="/dsp/clear">
      <description>clear the internal state of the audio processor. In general, you don't have to send this message directly. This is done automatically whenever the Max audio settings change. Yet, you might want to use this message to clear the object's sample-memory in case of a blow-up.</description>
      <digest>clear the internal state</digest>
    </method>
    <method name="/dump/dsp/latency">
      <description>send the processor latency (in samples) through the dump outlet.</description>
      <digest>dump latency</digest>
    </method>
    <method name="/verbose">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>set verbosity i.e. change the way information is posted to the Max console.<br/>Possible values: silent, minimal, normal, detailed.</description>
      <digest>set verbosity</digest>
    </method>
    <method name="/post/version">
      <description>print the version in the Max Console.</description>
      <digest>post version</digest>
    </method>
    <method name="/post/version">
      <arglist>
        <arg type="details"/>
      </arglist>
      <description>print detailed version in the Max Console.</description>
      <digest>post version</digest>
    </method>
    <method name="/post/doc">
      <description>print the help documentation in the Max Console.</description>
      <digest>post documentation</digest>
    </method>
    <method name="/post/state">
      <description>print the OSC status in the Max Console.</description>
      <digest>post current state</digest>
    </method>
    <method name="/preset/load">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>load a preset from file. Supported file extensions : '.txt' for human-readable OSC text file, '.osc' for binary encoded OSC file, '.coll' for human-readable Max coll file (compatible with the <o>coll</o> object). '.txt' is the default file format. You can specify the fullpath of the file, or only its filename if the file is inside Max search path.</description>
      <digest>load preset</digest>
    </method>
    <method name="/preset/load">
      <description>open a user dialog to load a preset file. Supported file extensions : '.txt' for human-readable OSC text file, '.osc' for binary encoded OSC file, '.coll' for human-readable Max coll file (compatible with the <o>coll</o> object). '.txt' is the default file format.</description>
      <digest>load preset</digest>
    </method>
    <method name="/preset/export">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>export a preset to file. Supported file extensions : '.txt' for human-readable OSC text file, '.osc' for binary encoded OSC file, '.coll' for human-readable Max coll file (compatible with the <o>coll</o> object). '.txt' is the default file format. If the file extension is not provided, '.txt' will be used by default.  If the destination folder is not provided, the file will be saved in your home folder (/Users/yourlogin).</description>
      <digest>export preset</digest>
    </method>
    <method name="/preset/export">
      <description>open a user dialog to export a preset to file. Supported file extensions : '.txt' for human-readable OSC text file, '.osc' for binary encoded OSC file, '.coll' for human-readable Max coll file (compatible with the <o>coll</o> object). '.txt' is the default file format.</description>
      <digest>export preset</digest>
    </method>
    <method name="/status">
      <description>open the status window and bring it to front.</description>
      <digest>open status window</digest>
    </method>
    <method name="/status/open">
      <description>open the status window and bring it to front.</description>
      <digest>open status window</digest>
    </method>
    <method name="/status/close">
      <description>close the status window.</description>
      <digest>close status window</digest>
    </method>
    <method name="/status/openorclose">
      <description>open the status window if it was closed; close it if it was opened.</description>
      <digest>open status window</digest>
    </method>
    <method name="/status/font/size">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set the font size of the status window.</description>
      <digest>font size for status window</digest>
    </method>
    <method name="/status/floating">
      <arglist>
        <arg type="boolean"/>
      </arglist>
      <description>make the status window 'floating' (i.e. always on top of other windows).</description>
      <digest>statuswindow floating</digest>
    </method>
    <method name="/help">
      <description>open the help window and bring it to front.</description>
      <digest>open help window</digest>
    </method>
    <method name="/help/open">
      <description>open the help window and bring it to front.</description>
      <digest>open help window</digest>
    </method>
    <method name="/help/close">
      <description>close the help window.</description>
      <digest>close help window</digest>
    </method>
    <method name="/help/openorclose">
      <description>open the help window if it was closed; close it if it was opened.</description>
      <digest>open help window</digest>
    </method>
    <method name="/help/font/size">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set the font size of the help window.</description>
      <digest>font size for help window</digest>
    </method>
    <method name="/help/floating">
      <arglist>
        <arg type="boolean"/>
      </arglist>
      <description>make the help window 'floating' (i.e. always on top of other windows).</description>
      <digest>helpwindow floating</digest>
    </method>
    <method name="/snapshot">
      <description>open the snapshot window and bring it to front.</description>
      <digest>open snapshot window</digest>
    </method>
    <method name="/snapshot/open">
      <description>open the snapshot window and bring it to front.</description>
      <digest>open snapshot window</digest>
    </method>
    <method name="/snapshot/close">
      <description>close the snapshot window.</description>
      <digest>close snapshot window</digest>
    </method>
    <method name="/snapshot/openorclose">
      <description>open the snapshot window if it was closed; close it if it was opened.</description>
      <digest>open snapshot window</digest>
    </method>
    <method name="/snapshot/font/size">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set the font size of the snapshot window.</description>
      <digest>font size for snapshot window</digest>
    </method>
    <method name="/snapshot/floating">
      <arglist>
        <arg type="boolean"/>
      </arglist>
      <description>make the snapshot window 'floating' (i.e. always on top of other windows).</description>
      <digest>snapshotwindow floating</digest>
    </method>
    <method name="/status/copytoclipboard">
      <description>copy the status to (the OS) clipboard.</description>
      <digest>copy status to clipboard</digest>
    </method>
    <method name="/status/copytoclipboard">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>copy the status to (the OS) clipboard, and specify the end-of-line character (e.g. ',').</description>
      <digest>copy status to clipboard</digest>
    </method>
    <method name="/dump">
      <description>dump the complete state of the object over the rightmost outlet (a.k.a. dump outlet).</description>
      <digest>dump state</digest>
    </method>
    <method name="/dump">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>dump a subset of the state of the object over the rightmost outlet. See spat5.tuto-dump-1.maxpat for usage examples.</description>
      <digest>dump state</digest>
    </method>
    <method name="/snapshot/deleteall">
      <description>delete all the snapshots currently in memory.</description>
      <digest>clear snapshots</digest>
    </method>
    <method name="/snapshot/add">
      <description>create a new snapshot with the current state.</description>
      <digest>add a new snapshot</digest>
    </method>
    <method name="/snapshot/add">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>create a new snapshot with the current state, and set its name.</description>
      <digest>add a new snapshot</digest>
    </method>
    <method name="/snapshot/[index]/store">
      <description>store the current state in the i-th snapshot (in memory).</description>
      <digest>store snapshot</digest>
    </method>
    <method name="/snapshot/[index]/recall">
      <description>recall the current state from the i-th snapshot.</description>
      <digest>recall snapshot</digest>
    </method>
    <method name="/snapshot/[index]/jump">
      <description>immediately recall the current state from the i-th snapshot (ignoring recall time).</description>
      <digest>immediately recall snapshot</digest>
    </method>
    <method name="/snapshot/[index]/name">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>set the name of the i-th snapshot.</description>
      <digest>set snapshot name</digest>
    </method>
    <method name="/snapshot/interpolate">
      <arglist>
        <arg type="int][int][number"/>
      </arglist>
      <description>interpolate between the i-th and j-th snapshots.</description>
      <digest>interpolate between two snapshots</digest>
    </method>
    <method name="/snapshot/interpolate">
      <arglist>
        <arg type="string][string][number"/>
      </arglist>
      <description>interpolate between two snapshots, given their names.</description>
      <digest>interpolate between two snapshots</digest>
    </method>
    <method name="/snapshot/[index]/delete">
      <description>delete the i-th snapshot.</description>
      <digest>delete snapshot</digest>
    </method>
    <method name="/snapshot/[index]/copytoclipboard">
      <description>copy the i-th snapshot to (the OS) clipboard.</description>
      <digest>copy snapshot to clipboard</digest>
    </method>
    <method name="/snapshot/[index]/copytoclipboard">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>copy the i-th snapshot to (the OS) clipboard, and specify the end-of-line character (e.g. ',').</description>
      <digest>copy snapshot to clipboard</digest>
    </method>
    <method name="/snapshot/[index]/export">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>export the i-th snapshot to file.</description>
      <digest>export snapshot</digest>
    </method>
    <method name="/snapshot/[index]/export/content">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>export the content of the i-th snapshot to file.</description>
      <digest>export snapshot content</digest>
    </method>
    <method name="/snapshot/export">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>export all snapshots to file.</description>
      <digest>export snapshots</digest>
    </method>
    <method name="/snapshot/import">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>import all snapshots from file.</description>
      <digest>export snapshots</digest>
    </method>
    <method name="/snapshot/recall/next">
      <description>recall the next snapshot.</description>
      <digest>recall next snapshot</digest>
    </method>
    <method name="/snapshot/recall/previous">
      <description>recall the previous snapshot.</description>
      <digest>recall previous snapshot</digest>
    </method>
    <method name="/snapshot/jump/next">
      <description>immediately recall the next snapshot (ignoring recall time).</description>
      <digest>immediately recall next snapshot</digest>
    </method>
    <method name="/snapshot/jump/previous">
      <description>immediately recall the previous snapshot (ignoring recall time).</description>
      <digest>immediately recall previous snapshot</digest>
    </method>
    <method name="/snapshot/recall">
      <arglist>
        <arg type="int"/>
      </arglist>
      <description>recall the i-th snapshot.</description>
      <digest>recall i-th snapshot</digest>
    </method>
    <method name="/snapshot/jump">
      <arglist>
        <arg type="int"/>
      </arglist>
      <description>immediately recall the i-th snapshot (ignoring recall time).</description>
      <digest>immediately recall i-th snapshot</digest>
    </method>
    <method name="/snapshot/recall/bytitle">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>recall a snapshot by title/name.</description>
      <digest>recall snapshot by title</digest>
    </method>
    <method name="/snapshot/jump/bytitle">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>immediately recall a snapshot by title/name (ignoring recall time).</description>
      <digest>immediately recall snapshot by title</digest>
    </method>
    <method name="/snapshot/lock">
      <arglist>
        <arg type="boolean"/>
      </arglist>
      <description>lock edition of the snapshots.</description>
      <digest>lock snapshots</digest>
    </method>
    <method name="/snapshot/renumber">
      <description>renumber the snapshots (their OSC pattern) based on their position.</description>
      <digest>renumber snapshots</digest>
    </method>
    <method name="/snapshot/sort">
      <description>sort the snapshots alphabetically (based on their titles).</description>
      <digest>sort snapshots alphabetically</digest>
    </method>
  </methodlist>
  <seealsolist>
    <seealso name="mubu.granular~"/>
    <seealso name="spat5.tapout~"/>
    <seealso name="spat5.delay~"/>
    <seealso name="spat5.multi.connect"/>
    <seealso name="spat5.overview"/>
  </seealsolist>
</c74object>
