<?xml version="1.0" encoding="UTF-8" standalone="yes"?>

<!-- created by libisp v5.0.2 - 18-mar-2024 19:03:59 -->

<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>


<c74object name="spat5.virtualspeakers~" module="spat5">
  <digest>Virtual speakers for headphones monitoring</digest>
  <description><o>spat5.virtualspeakers~</o> allows you to transcode a multichannel input file (or stream) into a 2-channel format. It uses the so-called virtual speakers approach to render the multichannel input as a binaural mix: <br/>the HRIRs corresponding to the position of each virtual speaker are convolved with that speaker feed and the convolution products for each of the ears are then summed giving the binaural signal for each ear.<br/><br/>To improve externalization you can also add artificial room effect via predefined room presets. <br/><br/>Please note that <o>spat5.virtualspeakers~</o> is based on binaural technology; this means that the output signals are meant to be listened over headphones, and not on a stereo speaker setup. The use of HRTF (head-related transfer function) for the binaural rendering may also slightly color the sound.<br/><br/>Reference(s) : <br/>J. Blauert and P. Laws. True simulation of loudspeaker sound reproduction while using headphones. Acta Acustica united with Acustica, 29(5):273 -- 277, 1973. <br/><br/> A. McKeag and D. S. McGrath. Using auralisation techniques to render 5.1 surround to binaural and transaural playback. In Proc. of the 102nd Convention of the Audio Engineering Society (AES), Munich, Germany, March 1997. <br/><br/> H. Moller. Fundamentals of binaural technology. Applied Acoustics, 36:171 -- 218, 1992. <br/><br/> F. Richter. BAP: binaural audio processor. In Proc. of the 92nd Convention of Audio Engineering Society (AES), Vienna, Austria, March 1992.<br/><br/></description>
  <inletlist>
  </inletlist>
  <outletlist>
  </outletlist>
  <objarglist>
  </objarglist>
  <attributelist>
    <attribute name="initwith" type="string" set="1" get="1" size="1">
      <description>The <m> initwith </m> attribute can be used to specify the initial state of the object. You should provide a list of comma-separated OSC commands. The list of messages should be quoted (with double quote character &quot;). This is similar to sending the list of commands via <o>loadbang</o> or <o>loadmess</o>.<br/> Have a look at the <i>spat5.tuto-osc-3.maxpat</i> example for further details.<br/> Note that the <m> initwith </m> attribute cannot be set via message, <o>attrui</o> or inspector; it must be typed directly within the object box.</description>
      <digest>initial state of the object</digest>
    </attribute>
    <attribute name="internals" type="int" set="1" get="1" size="1">
      <description>The <m> internals </m> attribute represents the number of internal channels of the artificial reverberator. <br/> Spat uses a Feedback Delay Network (FDN) reverberator engine. <br/> Basically this can be seen as an array of delay lines which are fed back into a mixing matrix. The <m> internals </m> attributes represents the size of the feedback matrix. <br/> Choosing the size of this matrix is a trade-off between CPU consumption and the echo density. <br/> Increasing the size of the matrix will generate a densier reverb tail at the expense of a higher CPU load. <br/> A typical value of 8 is a good compromise between CPU load and natural sounding reverb. A value of 16 may be useful especially when dealing with a very long reverberation time or with very percussive sound (where a smaller FDN might sometimes sounds too poor). <br/> It is recommended not to use a value below 6. </description>
      <digest>number of internal (reverberation) channels</digest>
    </attribute>
    <attribute name="mc" type="int" set="1" get="1" size="1">
      <description>The <m> mc </m> attribute enables multichannel patch-cord for this object (compatible with Max8 or higher). Note that the <m> mc </m> attribute cannot be set via message, <o>attrui</o> or inspector; it must be typed directly within the object box.</description>
      <digest>multichannel patch-cord</digest>
    </attribute>
    <attribute name="parameter_enable" type="boolean" set="1" get="1" size="1">
      <description>The <m> parameter_enable </m> attribute is used for compatibility with Max snapshots. It can also be used to store the initial state of the object (see 'Initial Enable' in the Max inspector).</description>
      <digest>compatibility with snapshots</digest>
    </attribute>
    <attribute name="speakers" type="int" set="1" get="1" size="1">
      <description>The <m> speakers </m> attribute represents the number of output channels of the object. This  attribute must be set in the object box, when the object is instantiated; it can not be later set with a message (or <o>attrui</o> or inspector), since  the number of signal inlets or outlets can not be changed dynamically.</description>
      <digest>number of output channels</digest>
    </attribute>
  </attributelist>
  <methodlist>
    <method name="/speaker/number">
      <arglist>
        <arg type="int"/>
      </arglist>
      <description>set the number of speakers.</description>
      <digest>set the number of speakers</digest>
    </method>
    <method name="/speakers/aed">
      <arglist>
        <arg type="nnnn..."/>
      </arglist>
      <description>set the list of speaker coordinates (with aed format).</description>
      <digest>set speaker positions</digest>
    </method>
    <method name="/speakers/xyz">
      <arglist>
        <arg type="nnnn..."/>
      </arglist>
      <description>set the list of speaker coordinates (with xyz format).</description>
      <digest>set speaker positions</digest>
    </method>
    <method name="/speakers/ade">
      <arglist>
        <arg type="nnnn..."/>
      </arglist>
      <description>set the list of speaker coordinates (with ade format).</description>
      <digest>set speaker positions</digest>
    </method>
    <method name="/speakers/xy">
      <arglist>
        <arg type="nnnn..."/>
      </arglist>
      <description>set the list of speaker coordinates (with xy format).</description>
      <digest>set speaker positions</digest>
    </method>
    <method name="/speakers/ae">
      <arglist>
        <arg type="nnnn..."/>
      </arglist>
      <description>set the list of speaker coordinates (with ae format).</description>
      <digest>set speaker positions</digest>
    </method>
    <method name="/speaker/[index]/aed">
      <arglist>
        <arg type="number][number][number"/>
      </arglist>
      <description>set the position of the i-th loudspeaker using navigation coordinates (azimuth/elevation/distance).</description>
      <digest>set speaker position</digest>
    </method>
    <method name="/speaker/[index]/ade">
      <arglist>
        <arg type="number][number][number"/>
      </arglist>
      <description>set the position of the i-th loudspeaker using navigation coordinates (azimuth/distance/elevation).</description>
      <digest>set speaker position</digest>
    </method>
    <method name="/speaker/[index]/xyz">
      <arglist>
        <arg type="number][number][number"/>
      </arglist>
      <description>set the position of the i-th loudspeaker using cartesian coordinates.</description>
      <digest>set speaker position</digest>
    </method>
    <method name="/speaker/[index]/xy">
      <arglist>
        <arg type="number][number"/>
      </arglist>
      <description>set the xy-coordinate of the i-th loudspeaker, and use default z (=0).</description>
      <digest>set speaker position</digest>
    </method>
    <method name="/speaker/[index]/ae">
      <arglist>
        <arg type="number][number"/>
      </arglist>
      <description>set the azimuth/elevation of the i-th loudspeaker, using default distance (=1).</description>
      <digest>set speaker position</digest>
    </method>
    <method name="/speaker/[index]/az">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set the azimuth of the i-th loudspeaker, using default distance (=1) and elevation (=0).</description>
      <digest>set speaker position</digest>
    </method>
    <method name="/width">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set width of the frontal stereo pair (in deg).</description>
      <digest>set width of the frontal stereo pair (in deg)</digest>
    </method>
    <method name="/rotation">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>rotate whole sound scene (offset angle) (in deg).</description>
      <digest>rotate whole sound scene (offset angle) (in deg)</digest>
    </method>
    <method name="/itd/scaling">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set scaling factor for ITD (in %).</description>
      <digest>set scaling factor for ITD (in %)</digest>
    </method>
    <method name="/itd/type">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>set ITD type.<br/>Possible values: basic, woodworth, larcherjot, savioja, miller, measurement, none.</description>
      <digest>set ITD type. Possible values: basic, woodworth, larcherjot, savioja, miller, measurement, none</digest>
    </method>
    <method name="/itd/latencymode">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>set ITD processing mode.<br/>Possible values: fixed latency, no latency.</description>
      <digest>set ITD processing mode. Possible values: fixed latency, no latency</digest>
    </method>
    <method name="/interpolation/mode">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>set interpolation mode for fractional delay.<br/>Possible values: nearest, linear, lagrange3, allpass, hermite3, watte3, bspline3, parabolic, allpass2, allpass3, nearestxfade.</description>
      <digest>set interpolation mode for fractional delay. Possible values: nearest, linear, lagrange3, allpass, hermite3, watte3, bspline3, parabolic, allpass2, allpass3, nearestxfade</digest>
    </method>
    <method name="/distance">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set the radius of the virtual speakers (in meters).</description>
      <digest>set the radius of the virtual speakers (in meters)</digest>
    </method>
    <method name="/groundreflections/enable">
      <arglist>
        <arg type="boolean"/>
      </arglist>
      <description>simulate reflections on the ground.</description>
      <digest>simulate reflections on the ground</digest>
    </method>
    <method name="/groundreflections/elev">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set elevation for simulated ground reflections (in deg).</description>
      <digest>set elevation for simulated ground reflections (in deg)</digest>
    </method>
    <method name="/roompreset">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>load a room preset (room reverb to increase externalization).</description>
      <digest>load a room preset (room reverb to increase externalization)</digest>
    </method>
    <method name="/propagation/delay">
      <arglist>
        <arg type="boolean"/>
      </arglist>
      <description>enable simulation of the propagation delay.</description>
      <digest>enable simulation of the propagation delay</digest>
    </method>
    <method name="/propagation/gain">
      <arglist>
        <arg type="boolean"/>
      </arglist>
      <description>enable simulation of the propagation gain.</description>
      <digest>enable simulation of the propagation gain</digest>
    </method>
    <method name="/dsp/mute">
      <arglist>
        <arg type="boolean"/>
      </arglist>
      <description>mute the DSP rendering. CPU resources are not used when the DSP is muted.  A smooth ramp is applied  (see /dsp/mute/ramptime).</description>
      <digest>mute DSP</digest>
    </method>
    <method name="/dsp/mute">
      <arglist>
        <arg type="boolean][number"/>
      </arglist>
      <description>mute the DSP rendering. CPU resources are not used when the DSP is muted.  A smooth ramp is applied; the second argument specifies the length (in msec) of the ramp.</description>
      <digest>mute DSP</digest>
    </method>
    <method name="/dsp/mute/ramptime">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set ramp time (in msec) for mute/unmute.</description>
      <digest>mute ramp time</digest>
    </method>
    <method name="/dsp/bypass">
      <arglist>
        <arg type="boolean"/>
      </arglist>
      <description>bypass the DSP rendering. CPU resources are not used when the DSP is bypassed.  A smooth ramp of is applied (see /dsp/bypass/ramptime).</description>
      <digest>bypass DSP</digest>
    </method>
    <method name="/dsp/bypass">
      <arglist>
        <arg type="boolean][number"/>
      </arglist>
      <description>mute the DSP rendering. CPU resources are not used when the DSP is muted.  A smooth ramp is applied; the second argument specifies the length (in msec) of the ramp.</description>
      <digest>bypass DSP</digest>
    </method>
    <method name="/dsp/bypass/ramptime">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set ramp time (in msec) for bypass.</description>
      <digest>bypass ramp time</digest>
    </method>
    <method name="/dsp/automute">
      <arglist>
        <arg type="boolean"/>
      </arglist>
      <description>enable/disable the auto-mute (i.e. disable audio computation when incoming signals are 0).</description>
      <digest>enable auto-mute</digest>
    </method>
    <method name="/dsp/automute/attack">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set the duration (in seconds) before auto-muting.</description>
      <digest>auto-mute attack time</digest>
    </method>
    <method name="/dsp/post">
      <description>post various information to the Max console (audio should be turned on).</description>
      <digest>post information</digest>
    </method>
    <method name="/dsp/clear">
      <description>clear the internal state of the audio processor. In general, you don't have to send this message directly. This is done automatically whenever the Max audio settings change. Yet, you might want to use this message to clear the object's sample-memory in case of a blow-up.</description>
      <digest>clear the internal state</digest>
    </method>
    <method name="/dump/dsp/latency">
      <description>send the processor latency (in samples) through the dump outlet.</description>
      <digest>dump latency</digest>
    </method>
    <method name="/verbose">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>set verbosity i.e. change the way information is posted to the Max console.<br/>Possible values: silent, minimal, normal, detailed.</description>
      <digest>set verbosity</digest>
    </method>
    <method name="/post/version">
      <description>print the version in the Max Console.</description>
      <digest>post version</digest>
    </method>
    <method name="/post/version">
      <arglist>
        <arg type="details"/>
      </arglist>
      <description>print detailed version in the Max Console.</description>
      <digest>post version</digest>
    </method>
    <method name="/post/doc">
      <description>print the help documentation in the Max Console.</description>
      <digest>post documentation</digest>
    </method>
    <method name="/post/state">
      <description>print the OSC status in the Max Console.</description>
      <digest>post current state</digest>
    </method>
    <method name="/preset/load">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>load a preset from file. Supported file extensions : '.txt' for human-readable OSC text file, '.osc' for binary encoded OSC file, '.coll' for human-readable Max coll file (compatible with the <o>coll</o> object). '.txt' is the default file format. You can specify the fullpath of the file, or only its filename if the file is inside Max search path.</description>
      <digest>load preset</digest>
    </method>
    <method name="/preset/load">
      <description>open a user dialog to load a preset file. Supported file extensions : '.txt' for human-readable OSC text file, '.osc' for binary encoded OSC file, '.coll' for human-readable Max coll file (compatible with the <o>coll</o> object). '.txt' is the default file format.</description>
      <digest>load preset</digest>
    </method>
    <method name="/preset/export">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>export a preset to file. Supported file extensions : '.txt' for human-readable OSC text file, '.osc' for binary encoded OSC file, '.coll' for human-readable Max coll file (compatible with the <o>coll</o> object). '.txt' is the default file format. If the file extension is not provided, '.txt' will be used by default.  If the destination folder is not provided, the file will be saved in your home folder (/Users/yourlogin).</description>
      <digest>export preset</digest>
    </method>
    <method name="/preset/export">
      <description>open a user dialog to export a preset to file. Supported file extensions : '.txt' for human-readable OSC text file, '.osc' for binary encoded OSC file, '.coll' for human-readable Max coll file (compatible with the <o>coll</o> object). '.txt' is the default file format.</description>
      <digest>export preset</digest>
    </method>
    <method name="/status">
      <description>open the status window and bring it to front.</description>
      <digest>open status window</digest>
    </method>
    <method name="/status/open">
      <description>open the status window and bring it to front.</description>
      <digest>open status window</digest>
    </method>
    <method name="/status/close">
      <description>close the status window.</description>
      <digest>close status window</digest>
    </method>
    <method name="/status/openorclose">
      <description>open the status window if it was closed; close it if it was opened.</description>
      <digest>open status window</digest>
    </method>
    <method name="/status/font/size">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set the font size of the status window.</description>
      <digest>font size for status window</digest>
    </method>
    <method name="/status/floating">
      <arglist>
        <arg type="boolean"/>
      </arglist>
      <description>make the status window 'floating' (i.e. always on top of other windows).</description>
      <digest>statuswindow floating</digest>
    </method>
    <method name="/help">
      <description>open the help window and bring it to front.</description>
      <digest>open help window</digest>
    </method>
    <method name="/help/open">
      <description>open the help window and bring it to front.</description>
      <digest>open help window</digest>
    </method>
    <method name="/help/close">
      <description>close the help window.</description>
      <digest>close help window</digest>
    </method>
    <method name="/help/openorclose">
      <description>open the help window if it was closed; close it if it was opened.</description>
      <digest>open help window</digest>
    </method>
    <method name="/help/font/size">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set the font size of the help window.</description>
      <digest>font size for help window</digest>
    </method>
    <method name="/help/floating">
      <arglist>
        <arg type="boolean"/>
      </arglist>
      <description>make the help window 'floating' (i.e. always on top of other windows).</description>
      <digest>helpwindow floating</digest>
    </method>
    <method name="/snapshot">
      <description>open the snapshot window and bring it to front.</description>
      <digest>open snapshot window</digest>
    </method>
    <method name="/snapshot/open">
      <description>open the snapshot window and bring it to front.</description>
      <digest>open snapshot window</digest>
    </method>
    <method name="/snapshot/close">
      <description>close the snapshot window.</description>
      <digest>close snapshot window</digest>
    </method>
    <method name="/snapshot/openorclose">
      <description>open the snapshot window if it was closed; close it if it was opened.</description>
      <digest>open snapshot window</digest>
    </method>
    <method name="/snapshot/font/size">
      <arglist>
        <arg type="number"/>
      </arglist>
      <description>set the font size of the snapshot window.</description>
      <digest>font size for snapshot window</digest>
    </method>
    <method name="/snapshot/floating">
      <arglist>
        <arg type="boolean"/>
      </arglist>
      <description>make the snapshot window 'floating' (i.e. always on top of other windows).</description>
      <digest>snapshotwindow floating</digest>
    </method>
    <method name="/status/copytoclipboard">
      <description>copy the status to (the OS) clipboard.</description>
      <digest>copy status to clipboard</digest>
    </method>
    <method name="/status/copytoclipboard">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>copy the status to (the OS) clipboard, and specify the end-of-line character (e.g. ',').</description>
      <digest>copy status to clipboard</digest>
    </method>
    <method name="/dump">
      <description>dump the complete state of the object over the rightmost outlet (a.k.a. dump outlet).</description>
      <digest>dump state</digest>
    </method>
    <method name="/dump">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>dump a subset of the state of the object over the rightmost outlet. See spat5.tuto-dump-1.maxpat for usage examples.</description>
      <digest>dump state</digest>
    </method>
    <method name="/snapshot/deleteall">
      <description>delete all the snapshots currently in memory.</description>
      <digest>clear snapshots</digest>
    </method>
    <method name="/snapshot/add">
      <description>create a new snapshot with the current state.</description>
      <digest>add a new snapshot</digest>
    </method>
    <method name="/snapshot/add">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>create a new snapshot with the current state, and set its name.</description>
      <digest>add a new snapshot</digest>
    </method>
    <method name="/snapshot/[index]/store">
      <description>store the current state in the i-th snapshot (in memory).</description>
      <digest>store snapshot</digest>
    </method>
    <method name="/snapshot/[index]/recall">
      <description>recall the current state from the i-th snapshot.</description>
      <digest>recall snapshot</digest>
    </method>
    <method name="/snapshot/[index]/jump">
      <description>immediately recall the current state from the i-th snapshot (ignoring recall time).</description>
      <digest>immediately recall snapshot</digest>
    </method>
    <method name="/snapshot/[index]/name">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>set the name of the i-th snapshot.</description>
      <digest>set snapshot name</digest>
    </method>
    <method name="/snapshot/interpolate">
      <arglist>
        <arg type="int][int][number"/>
      </arglist>
      <description>interpolate between the i-th and j-th snapshots.</description>
      <digest>interpolate between two snapshots</digest>
    </method>
    <method name="/snapshot/interpolate">
      <arglist>
        <arg type="string][string][number"/>
      </arglist>
      <description>interpolate between two snapshots, given their names.</description>
      <digest>interpolate between two snapshots</digest>
    </method>
    <method name="/snapshot/[index]/delete">
      <description>delete the i-th snapshot.</description>
      <digest>delete snapshot</digest>
    </method>
    <method name="/snapshot/[index]/copytoclipboard">
      <description>copy the i-th snapshot to (the OS) clipboard.</description>
      <digest>copy snapshot to clipboard</digest>
    </method>
    <method name="/snapshot/[index]/copytoclipboard">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>copy the i-th snapshot to (the OS) clipboard, and specify the end-of-line character (e.g. ',').</description>
      <digest>copy snapshot to clipboard</digest>
    </method>
    <method name="/snapshot/[index]/export">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>export the i-th snapshot to file.</description>
      <digest>export snapshot</digest>
    </method>
    <method name="/snapshot/[index]/export/content">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>export the content of the i-th snapshot to file.</description>
      <digest>export snapshot content</digest>
    </method>
    <method name="/snapshot/export">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>export all snapshots to file.</description>
      <digest>export snapshots</digest>
    </method>
    <method name="/snapshot/import">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>import all snapshots from file.</description>
      <digest>export snapshots</digest>
    </method>
    <method name="/snapshot/recall/next">
      <description>recall the next snapshot.</description>
      <digest>recall next snapshot</digest>
    </method>
    <method name="/snapshot/recall/previous">
      <description>recall the previous snapshot.</description>
      <digest>recall previous snapshot</digest>
    </method>
    <method name="/snapshot/jump/next">
      <description>immediately recall the next snapshot (ignoring recall time).</description>
      <digest>immediately recall next snapshot</digest>
    </method>
    <method name="/snapshot/jump/previous">
      <description>immediately recall the previous snapshot (ignoring recall time).</description>
      <digest>immediately recall previous snapshot</digest>
    </method>
    <method name="/snapshot/recall">
      <arglist>
        <arg type="int"/>
      </arglist>
      <description>recall the i-th snapshot.</description>
      <digest>recall i-th snapshot</digest>
    </method>
    <method name="/snapshot/jump">
      <arglist>
        <arg type="int"/>
      </arglist>
      <description>immediately recall the i-th snapshot (ignoring recall time).</description>
      <digest>immediately recall i-th snapshot</digest>
    </method>
    <method name="/snapshot/recall/bytitle">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>recall a snapshot by title/name.</description>
      <digest>recall snapshot by title</digest>
    </method>
    <method name="/snapshot/jump/bytitle">
      <arglist>
        <arg type="string"/>
      </arglist>
      <description>immediately recall a snapshot by title/name (ignoring recall time).</description>
      <digest>immediately recall snapshot by title</digest>
    </method>
    <method name="/snapshot/lock">
      <arglist>
        <arg type="boolean"/>
      </arglist>
      <description>lock edition of the snapshots.</description>
      <digest>lock snapshots</digest>
    </method>
    <method name="/snapshot/renumber">
      <description>renumber the snapshots (their OSC pattern) based on their position.</description>
      <digest>renumber snapshots</digest>
    </method>
    <method name="/snapshot/sort">
      <description>sort the snapshots alphabetically (based on their titles).</description>
      <digest>sort snapshots alphabetically</digest>
    </method>
  </methodlist>
  <seealsolist>
    <seealso name="spat5.pan~"/>
    <seealso name="spat5.binaural~"/>
    <seealso name="spat5.headphoneeq~"/>
    <seealso name="spat5.align~"/>
    <seealso name="spat5.ctc~"/>
    <seealso name="spat5.sofa.loader"/>
    <seealso name="spat5.sofa.infos"/>
    <seealso name="spat5.hrtf.infos"/>
    <seealso name="spat5.hoa.binaural~"/>
    <seealso name="spat5.multi.connect"/>
    <seealso name="spat5.overview"/>
  </seealsolist>
</c74object>
